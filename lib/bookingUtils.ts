// lib/bookingUtils.ts - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á
import QRCode from 'qrcode';

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
export interface BookingValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

export interface TravelDateInfo {
  date: string;
  dayName: string;
  isWeekend: boolean;
  isToday: boolean;
  isTomorrow: boolean;
  daysFromNow: number;
}

export interface BookingQRData {
  booking_id: string;
  ticket_code: string;
  passenger_order: number;
  passenger_email: string;
  travel_date: string;
  total_passengers: number;
  price: number;
  validation_key: string;
  expires_at: string;
  type: 'booking_ticket';
}

export interface BookingPricing {
  pricePerTicket: number;
  totalPrice: number;
  currency: string;
  discountApplied?: {
    type: string;
    amount: number;
    description: string;
  };
}

// ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
export const BOOKING_CONSTANTS = {
  MAX_ADVANCE_DAYS: 7,          // ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 7 ‡∏ß‡∏±‡∏ô
  MIN_TICKETS: 1,               // ‡∏à‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏ï‡∏±‡πã‡∏ß
  MAX_TICKETS: 10,              // ‡∏à‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏ï‡∏±‡πã‡∏ß‡∏ï‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  DEFAULT_PRICE: 45000,         // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 45,000 ‡∏Å‡∏µ‡∏ö
  EXPIRY_HOURS: 24,             // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  PAYMENT_WINDOW_HOURS: 24,     // ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
} as const;

// ====================================
// üìÖ Date & Time Utilities
// ====================================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export function canBookForDate(dateString: string): BookingValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  try {
    const targetDate = new Date(dateString + 'T00:00:00.000Z');
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const diffTime = targetDate.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï
    if (diffDays < 0) {
      errors.push('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    if (diffDays === 0) {
      const currentHour = new Date().getHours();
      if (currentHour >= 18) {  // ‡∏´‡∏•‡∏±‡∏á 6 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô
        errors.push('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á 18:00 ‡∏ô.');
      } else {
        warnings.push('‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á');
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (diffDays > BOOKING_CONSTANTS.MAX_ADVANCE_DAYS) {
      errors.push(`‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${BOOKING_CONSTANTS.MAX_ADVANCE_DAYS} ‡∏ß‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô`);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á)
    const dayOfWeek = targetDate.getDay();
    if (dayOfWeek === 0) {  // ‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
      warnings.push('‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≠‡∏á');
    }
    
  } catch (error) {
    errors.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
 */
export function getTravelDateInfo(dateString: string): TravelDateInfo {
  const targetDate = new Date(dateString + 'T00:00:00.000Z');
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  const diffTime = targetDate.getTime() - today.getTime();
  const daysFromNow = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  const dayNames = ['‡∫≠‡∫≤‡∫ó‡∫¥‡∫î', '‡∫à‡∫±‡∫ô', '‡∫≠‡∫±‡∫á‡∫Ñ‡∫≤‡∫ô', '‡∫û‡∫∏‡∫î', '‡∫û‡∫∞‡∫´‡∫±‡∫î', '‡∫™‡∫∏‡∫Å', '‡ªÄ‡∫™‡∫ª‡∫≤'];
  const dayOfWeek = targetDate.getDay();
  
  return {
    date: dateString,
    dayName: dayNames[dayOfWeek],
    isWeekend: dayOfWeek === 0 || dayOfWeek === 6,
    isToday: daysFromNow === 0,
    isTomorrow: daysFromNow === 1,
    daysFromNow
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ
 */
export function getAvailableDates(): TravelDateInfo[] {
  const dates: TravelDateInfo[] = [];
  const today = new Date();
  
  for (let i = 0; i <= BOOKING_CONSTANTS.MAX_ADVANCE_DAYS; i++) {
    const date = new Date(today);
    date.setDate(date.getDate() + i);
    
    const dateString = date.toISOString().split('T')[0];
    const validation = canBookForDate(dateString);
    
    if (validation.isValid) {
      dates.push(getTravelDateInfo(dateString));
    }
  }
  
  return dates;
}

// ====================================
// üí∞ Pricing Utilities
// ====================================

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
 */
export function calculateBookingPrice(
  ticketCount: number, 
  travelDate: string,
  discountCode?: string
): BookingPricing {
  const basePrice = BOOKING_CONSTANTS.DEFAULT_PRICE;
  let pricePerTicket = basePrice;
  let discountApplied: BookingPricing['discountApplied'];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (discountCode) {
    const discount = applyDiscountCode(discountCode, ticketCount, travelDate);
    if (discount) {
      pricePerTicket = Math.max(0, basePrice - discount.amount);
      discountApplied = discount;
    }
  }
  
  return {
    pricePerTicket,
    totalPrice: pricePerTicket * ticketCount,
    currency: 'LAK',
    discountApplied
  };
}

/**
 * ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
 */
function applyDiscountCode(
  code: string, 
  ticketCount: number, 
  travelDate: string
): BookingPricing['discountApplied'] | null {
  // TODO: Implement discount code logic
  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
  // - EARLY_BIRD: ‡∏•‡∏î 5,000 ‡∏Å‡∏µ‡∏ö ‡∏ñ‡πâ‡∏≤‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏ß‡∏±‡∏ô
  // - GROUP5: ‡∏•‡∏î 2,000 ‡∏Å‡∏µ‡∏ö/‡∏ï‡∏±‡πã‡∏ß ‡∏ñ‡πâ‡∏≤‡∏à‡∏≠‡∏á 5 ‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
  
  const discountCodes: Record<string, any> = {
    'EARLY_BIRD': {
      type: 'early_booking',
      amount: 5000,
      description: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
      condition: (ticketCount: number, travelDate: string) => {
        const days = getTravelDateInfo(travelDate).daysFromNow;
        return days >= 5;
      }
    },
    'GROUP5': {
      type: 'group_discount',
      amount: 2000,
      description: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° 5 ‡∏Ñ‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ',
      condition: (ticketCount: number) => ticketCount >= 5
    }
  };
  
  const discount = discountCodes[code.toUpperCase()];
  if (discount && discount.condition(ticketCount, travelDate)) {
    return {
      type: discount.type,
      amount: discount.amount,
      description: discount.description
    };
  }
  
  return null;
}

// ====================================
// ‚úÖ Validation Utilities
// ====================================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
 */
export function validateBookingData(data: {
  travelDate: string;
  ticketCount: number;
  bookerEmail: string;
  passengerEmails: string[];
  bookerName?: string;
  bookerPhone?: string;
}): BookingValidationResult {
  const errors: string[] = [];
  const warnings: string[] = [];
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
  const dateValidation = canBookForDate(data.travelDate);
  errors.push(...dateValidation.errors);
  warnings.push(...dateValidation.warnings);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß
  if (data.ticketCount < BOOKING_CONSTANTS.MIN_TICKETS) {
    errors.push(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ${BOOKING_CONSTANTS.MIN_TICKETS} ‡πÉ‡∏ö`);
  }
  if (data.ticketCount > BOOKING_CONSTANTS.MAX_TICKETS) {
    errors.push(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${BOOKING_CONSTANTS.MAX_TICKETS} ‡πÉ‡∏ö‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á`);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
  if (!isValidEmail(data.bookerEmail)) {
    errors.push('Email ‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Email ‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
  if (data.passengerEmails.length !== data.ticketCount) {
    errors.push(`‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Email ‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡πã‡∏ß (${data.ticketCount} ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)`);
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email ‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô
  data.passengerEmails.forEach((email, index) => {
    if (!isValidEmail(email)) {
      errors.push(`Email ‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà ${index + 1} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
    }
  });
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email ‡∏ã‡πâ‡∏≥
  const uniqueEmails = new Set(data.passengerEmails.map(e => e.toLowerCase()));
  if (uniqueEmails.size !== data.passengerEmails.length) {
    errors.push('‡∏û‡∏ö Email ‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô');
  }
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  if (data.bookerPhone && !isValidPhoneNumber(data.bookerPhone)) {
    warnings.push('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
  }
  
  return {
    isValid: errors.length === 0,
    errors,
    warnings
  };
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Email
 */
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email.trim());
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
 */
export function isValidPhoneNumber(phone: string): boolean {
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏•‡∏≤‡∏ß: +856, 856, 020, 030 ‡∏Ø‡∏•‡∏Ø
  const phoneRegex = /^(\+?856|0)[2-9]\d{7,8}$/;
  return phoneRegex.test(phone.replace(/[\s-]/g, ''));
}

// ====================================
// üé´ QR Code Utilities
// ====================================

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πã‡∏ß‡∏à‡∏≠‡∏á
 */
export function generateBookingQRData(ticket: {
  booking_id: string;
  ticket_code: string;
  passenger_order: number;
  passenger_email: string;
  travel_date: string;
  total_passengers: number;
  price: number;
  expires_at: Date;
}): string {
  const qrData: BookingQRData = {
    booking_id: ticket.booking_id,
    ticket_code: ticket.ticket_code,
    passenger_order: ticket.passenger_order,
    passenger_email: ticket.passenger_email,
    travel_date: ticket.travel_date,
    total_passengers: ticket.total_passengers,
    price: ticket.price,
    validation_key: `BT-${ticket.ticket_code}-${ticket.expires_at.getTime()}`,
    expires_at: ticket.expires_at.toISOString(),
    type: 'booking_ticket'
  };
  
  return JSON.stringify(qrData);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÄ‡∏õ‡πá‡∏ô Data URL
 */
export async function generateQRCodeImage(data: string): Promise<string> {
  try {
    return await QRCode.toDataURL(data, {
      width: 200,
      margin: 2,
      color: {
        dark: '#000000',
        light: '#FFFFFF'
      },
      errorCorrectionLevel: 'M'
    });
  } catch (error) {
    console.error('Error generating QR code:', error);
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡πÑ‡∏î‡πâ');
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á QR Code ‡∏ï‡∏±‡πã‡∏ß‡∏à‡∏≠‡∏á
 */
export function validateBookingQR(qrDataString: string): {
  isValid: boolean;
  data?: BookingQRData;
  error?: string;
} {
  try {
    const data: BookingQRData = JSON.parse(qrDataString);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó QR Code
    if (data.type !== 'booking_ticket') {
      return {
        isValid: false,
        error: 'QR Code ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡πã‡∏ß‡∏à‡∏≠‡∏á'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredFields: (keyof BookingQRData)[] = [
      'booking_id', 'ticket_code', 'passenger_order', 
      'travel_date', 'validation_key', 'expires_at'
    ];
    
    for (const field of requiredFields) {
      if (!data[field]) {
        return {
          isValid: false,
          error: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${field}`
        };
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    const expiresAt = new Date(data.expires_at);
    if (isNaN(expiresAt.getTime())) {
      return {
        isValid: false,
        error: '‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      };
    }
    
    if (new Date() > expiresAt) {
      return {
        isValid: false,
        error: 'QR Code ‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß'
      };
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö validation key
    const expectedKeyPrefix = `BT-${data.ticket_code}-`;
    if (!data.validation_key.startsWith(expectedKeyPrefix)) {
      return {
        isValid: false,
        error: '‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      };
    }
    
    return {
      isValid: true,
      data
    };
    
  } catch (error) {
    return {
      isValid: false,
      error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    };
  }
}

// ====================================
// üî¢ Utility Functions
// ====================================

/**
 * ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏á‡∏¥‡∏ô
 */
export function formatCurrency(amount: number, currency: string = 'LAK'): string {
  return new Intl.NumberFormat('lo-LA', {
    style: 'currency',
    currency: currency === 'LAK' ? 'LAK' : 'USD',
    minimumFractionDigits: 0,
    maximumFractionDigits: 0
  }).format(amount);
}

/**
 * ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏•‡∏≤‡∏ß
 */
export function formatDateLao(dateString: string): string {
  const date = new Date(dateString + 'T00:00:00.000Z');
  return date.toLocaleDateString('lo-LA', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    weekday: 'long'
  });
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
 */
export function formatTimeRemaining(milliseconds: number): string {
  if (milliseconds <= 0) return '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß';
  
  const hours = Math.floor(milliseconds / (1000 * 60 * 60));
  const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
  
  if (hours > 0) {
    return `${hours} ‡∫ä‡∫ª‡ªà‡∫ß‡ªÇ‡∫°‡∫á ${minutes} ‡∫ô‡∫≤‡∫ó‡∫µ`;
  } else {
    return `${minutes} ‡∫ô‡∫≤‡∫ó‡∫µ`;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
 */
export function generateBookingSummary(booking: {
  booking_id: string;
  travel_date: string;
  total_tickets: number;
  total_price: number;
  passenger_emails: string[];
}): string {
  const dateInfo = getTravelDateInfo(booking.travel_date);
  const formattedPrice = formatCurrency(booking.total_price);
  
  return `
üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ${booking.booking_id}

üìÖ ‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á: ${formatDateLao(booking.travel_date)} (${dateInfo.dayName})
üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£: ${booking.total_tickets} ‡∏Ñ‡∏ô
üí∞ ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${formattedPrice}

üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£:
${booking.passenger_emails.map((email, index) => 
  `${index + 1}. ${email}`
).join('\n')}
  `.trim();
}