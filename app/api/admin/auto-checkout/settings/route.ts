// app/api/admin/auto-checkout/settings/route.ts - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Models
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET - ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ default values)
export async function GET(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
    const session = await getServerSession(authOptions);
    if (!session || session.user.role !== 'admin') {
      return NextResponse.json(
        { error: 'Unauthorized - Only admins can access auto checkout settings' },
        { status: 401 }
      );
    }

    await connectDB();
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ default settings ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Database
    const settings = {
      enabled: process.env.AUTO_CHECKOUT_ENABLED === 'true' || false,
      checkoutTime: process.env.AUTO_CHECKOUT_TIME || '17:30',
      timezone: process.env.AUTO_CHECKOUT_TIMEZONE || 'Asia/Vientiane',
      lastRun: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
      affectedUsers: 0 // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
    };
    
    console.log('üìñ Auto Checkout Settings loaded:', settings);
    
    return NextResponse.json(settings);
  } catch (error) {
    console.error('Get Auto Checkout Settings Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch auto checkout settings' },
      { status: 500 }
    );
  }
}

// POST - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà (‡πÅ‡∏Ñ‡πà log ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á)
export async function POST(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
    const session = await getServerSession(authOptions);
    if (!session || session.user.role !== 'admin') {
      return NextResponse.json(
        { error: 'Unauthorized - Only admins can modify auto checkout settings' },
        { status: 401 }
      );
    }

    await connectDB();
    
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request body
    const body = await request.json();
    const { enabled, checkoutTime, timezone } = body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (enabled && !checkoutTime) {
      return NextResponse.json(
        { error: 'Checkout time is required when auto checkout is enabled' },
        { status: 400 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    if (checkoutTime && !/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(checkoutTime)) {
      return NextResponse.json(
        { error: 'Invalid time format. Use HH:MM format' },
        { status: 400 }
      );
    }
    
    // ‚úÖ ‡πÅ‡∏Ñ‡πà log ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Database
    const settingsData = {
      enabled: Boolean(enabled),
      checkoutTime: checkoutTime || '17:30',
      timezone: timezone || process.env.APP_TIMEZONE || 'Asia/Vientiane',
      updatedBy: session.user.email || session.user.name,
      updatedAt: new Date().toISOString()
    };
    
    console.log('üíæ Auto checkout settings updated (logged only):', settingsData);
    
    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏£‡∏≤‡∏ö
    const message = enabled 
      ? `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Checkout ‡πÄ‡∏ß‡∏•‡∏≤ ${checkoutTime} (${timezone})`
      : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Auto Checkout';
    
    console.log('üì¢ Settings change:', message);
    
    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"
    return NextResponse.json({
      ...settingsData,
      message: '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß (‡∏î‡∏π‡πÉ‡∏ô Console Log)',
      note: 'Settings are logged to console instead of database'
    });
  } catch (error) {
    console.error('Save Auto Checkout Settings Error:', error);
    return NextResponse.json(
      { error: 'Failed to save auto checkout settings: ' + (error as Error).message },
      { status: 500 }
    );
  }
}