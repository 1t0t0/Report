// app/api/admin/auto-checkout/run/route.ts - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Models
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import WorkLog from '@/models/WorkLog';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// POST - ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Auto Checkout ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ WorkLog ‡πÅ‡∏ó‡∏ô AutoCheckoutLog)
export async function POST(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
    const session = await getServerSession(authOptions);
    if (!session || session.user.role !== 'admin') {
      return NextResponse.json(
        { error: 'Unauthorized - Only admins can run auto checkout' },
        { status: 401 }
      );
    }

    await connectDB();
    
    console.log('üöÄ Starting manual auto checkout process...');
    console.log('üë§ Executed by:', session.user.email || session.user.name);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    const checkedInUsers = await User.find({
      checkInStatus: 'checked-in',
      role: { $in: ['driver', 'staff'] }
    }).select('_id name employeeId role email lastCheckIn');
    
    console.log(`üë• Found ${checkedInUsers.length} users still checked in`);
    
    if (checkedInUsers.length === 0) {
      return NextResponse.json({
        success: true,
        message: '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ó‡∫µ‡ªà‡∫ç‡∫±‡∫á‡ªÄ‡∫ä‡∫±‡∫Å‡∫≠‡∫¥‡∫ô‡∫¢‡∫π‡ªà',
        checkedOutCount: 0,
        checkedOutUsers: []
      });
    }
    
    const results = [];
    const now = new Date();
    
    // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ checkout ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    for (const user of checkedInUsers) {
      try {
        console.log(`üîÑ Processing checkout for: ${user.name} (${user.employeeId})`);
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô
        await User.findByIdAndUpdate(
          user._id,
          { 
            $set: { 
              checkInStatus: 'checked-out',
              lastCheckOut: now 
            }
          }
        );
        
        // ‚úÖ ‡πÉ‡∏ä‡πâ WorkLog ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô AutoCheckoutLog
        await WorkLog.logWorkAction(user._id.toString(), 'check-out');
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        let workHours = 0;
        if (user.lastCheckIn) {
          const checkInTime = new Date(user.lastCheckIn);
          workHours = (now.getTime() - checkInTime.getTime()) / (1000 * 60 * 60);
        }
        
        results.push({
          userId: user._id,
          name: user.name,
          employeeId: user.employeeId,
          role: user.role,
          checkOutTime: now,
          workHours: Math.round(workHours * 100) / 100,
          status: 'success'
        });
        
        console.log(`‚úÖ Auto checkout successful for ${user.name} (${user.employeeId}) - ${workHours.toFixed(2)} hours`);
      } catch (userError) {
        console.error(`‚ùå Auto checkout failed for user ${user._id}:`, userError);
        
        results.push({
          userId: user._id,
          name: user.name,
          employeeId: user.employeeId,
          role: user.role,
          status: 'failed',
          error: (userError as Error).message
        });
      }
    }
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà checkout ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const successfulCheckouts = results.filter(r => r.status === 'success');
    const failedCheckouts = results.filter(r => r.status === 'failed');
    
    console.log(`üìä Auto checkout completed: ${successfulCheckouts.length} successful, ${failedCheckouts.length} failed`);
    
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Console ‡πÅ‡∏ó‡∏ô Database
    const executionLog = {
      executedBy: {
        id: session.user.id,
        email: session.user.email || session.user.name,
        name: session.user.name
      },
      executedAt: now,
      totalUsers: checkedInUsers.length,
      successfulCheckouts: successfulCheckouts.length,
      failedCheckouts: failedCheckouts.length,
      executionType: 'manual',
      details: results,
      summary: {
        totalWorkHours: successfulCheckouts.reduce((sum, user) => sum + (user.workHours || 0), 0),
        avgWorkHours: successfulCheckouts.length > 0 
          ? successfulCheckouts.reduce((sum, user) => sum + (user.workHours || 0), 0) / successfulCheckouts.length 
          : 0
      }
    };
    
    console.log('üìã Manual Auto Checkout Execution Log:', JSON.stringify(executionLog, null, 2));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
    const summaryMessage = successfulCheckouts.length > 0 
      ? `üéâ ‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô‡∫Å‡∫≤‡∫ô Auto Checkout ‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î: ${successfulCheckouts.length} ‡∫Ñ‡∫ª‡∫ô` +
        (failedCheckouts.length > 0 ? ` (‡∫•‡∫ª‡ªâ‡∫°‡ªÄ‡∫´‡∫•‡∫ß ${failedCheckouts.length} ‡∫Ñ‡∫ª‡∫ô)` : '')
      : '‚ö†Ô∏è ‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡ªÉ‡∫î‡∫ñ‡∫∑‡∫Å checkout';
    
    console.log('üì¢ Summary:', summaryMessage);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö
    return NextResponse.json({
      success: true,
      message: summaryMessage,
      checkedOutCount: successfulCheckouts.length,
      failedCount: failedCheckouts.length,
      executedAt: now,
      executedBy: session.user.email || session.user.name,
      checkedOutUsers: successfulCheckouts,
      failedUsers: failedCheckouts,
      summary: executionLog.summary,
      note: 'Execution details logged to console'
    });
    
  } catch (error) {
    console.error('üí• Auto Checkout Error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to execute auto checkout: ' + (error as Error).message,
        details: error instanceof Error ? error.stack : 'Unknown error',
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}