// app/api/tickets/route.ts - UUID Ticket System (6 Characters)
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import Ticket from '@/models/Ticket';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// üéØ ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ö‡∏™‡∏ô)
const SAFE_CHARS = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
// ‡πÑ‡∏°‡πà‡∏°‡∏µ: I, O (‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏Å‡∏±‡∏ö 1, 0) ‡πÅ‡∏•‡∏∞ 0, 1 (‡∏™‡∏±‡∏ö‡∏™‡∏ô‡∏Å‡∏±‡∏ö O, I)

/**
 * üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket Number ‡πÅ‡∏ö‡∏ö UUID (6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
 * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: T + 5 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡πà‡∏°
 * ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: TK7M2X, TH9Q4P, TZ8R6N
 */
function generateUUIDTicketNumber(): string {
  let result = 'T';
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á 5 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡πà‡∏°
  for (let i = 0; i < 5; i++) {
    const randomIndex = Math.floor(Math.random() * SAFE_CHARS.length);
    result += SAFE_CHARS[randomIndex];
  }
  
  return result;
}

/**
 * üîí ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket Number ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
 * ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
 */
async function generateUniqueTicketNumber(): Promise<string> {
  const maxAttempts = 20; // ‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  let attempt = 0;
  
  while (attempt < maxAttempts) {
    attempt++;
    
    const candidateNumber = generateUUIDTicketNumber();
    
    console.log(`üé≤ Generated candidate: ${candidateNumber} (attempt ${attempt})`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏°‡∏±‡πâ‡∏¢
    const existingTicket = await Ticket.findOne({ ticketNumber: candidateNumber });
    
    if (!existingTicket) {
      console.log(`‚úÖ Unique ticket number found: ${candidateNumber}`);
      return candidateNumber;
    }
    
    console.log(`‚ö†Ô∏è ${candidateNumber} already exists, trying again...`);
  }
  
  // üÜò ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡∏ã‡πâ‡∏≥ (‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ô‡πâ‡∏≠‡∏¢‡∏°‡∏≤‡∏Å) ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà timestamp
  const timestamp = Date.now().toString().slice(-2);
  const emergency = `T${SAFE_CHARS[Math.floor(Math.random() * SAFE_CHARS.length)]}${timestamp}${SAFE_CHARS[Math.floor(Math.random() * SAFE_CHARS.length)]}${SAFE_CHARS[Math.floor(Math.random() * SAFE_CHARS.length)]}`;
  
  console.log(`üÜò Using emergency number: ${emergency}`);
  return emergency;
}

/**
 * üé´ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
 */
async function createTicketSafely(ticketData: any): Promise<any> {
  const maxRetries = 3;
  
  for (let retry = 1; retry <= maxRetries; retry++) {
    try {
      console.log(`üíæ Creating ticket (attempt ${retry}/${maxRetries})`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket number ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      const ticketNumber = await generateUniqueTicketNumber();
      
      const fullTicketData = {
        ...ticketData,
        ticketNumber
      };
      
      console.log('üìù Ticket data:', fullTicketData);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const ticket = await Ticket.create(fullTicketData);
      
      console.log(`üéâ Ticket created successfully: ${ticket.ticketNumber}`);
      return ticket;
      
    } catch (error: any) {
      console.error(`‚ùå Create attempt ${retry} failed:`, error.message);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô duplicate key error ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏•‡∏≠‡∏á‡πÑ‡∏î‡πâ
      if (error.code === 11000 && retry < maxRetries) {
        console.log(`üîÑ Duplicate key detected, retrying...`);
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        await new Promise(resolve => setTimeout(resolve, 100));
        continue;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà duplicate ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      throw error;
    }
  }
  
  throw new Error('Failed to create ticket after multiple attempts');
}

// üöÄ API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Ticket
export async function POST(request: Request) {
  try {
    console.log('üéØ Starting UUID ticket creation...');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connectDB();

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request
    const body = await request.json();
    const { price, paymentMethod } = body;

    console.log('üìã Request data:', { 
      price, 
      paymentMethod, 
      soldBy: session.user.email 
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!price || !paymentMethod) {
      return NextResponse.json(
        { error: 'Price and Payment Method are required' }, 
        { status: 400 }
      );
    }

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket
    const ticketData = {
      price: Number(price),
      paymentMethod,
      soldBy: session.user.email || session.user.name || 'System',
      soldAt: new Date()
    };

    // üé≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á ticket ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏∞‡∏ö‡∏ö UUID
    const ticket = await createTicketSafely(ticketData);

    console.log('üéä Final ticket created:', {
      id: ticket._id,
      ticketNumber: ticket.ticketNumber,
      price: ticket.price,
      soldAt: ticket.soldAt
    });

    // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket
    return NextResponse.json(ticket.toObject());

  } catch (error) {
    console.error('üí• UUID Ticket Creation Error:', error);
    
    return NextResponse.json(
      { 
        error: 'Failed to create ticket',
        details: error instanceof Error ? error.message : 'Unknown error',
        timestamp: new Date().toISOString()
      }, 
      { status: 500 }
    );
  }
}

// üìã API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
export async function GET(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö session
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    await connectDB();
    
    // ‡∏£‡∏±‡∏ö query parameters
    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    const paymentMethod = searchParams.get('paymentMethod');
    
    console.log('üìñ GET tickets request:', { page, limit, paymentMethod });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
    const filter: any = {};
    
    if (paymentMethod && (paymentMethod === 'cash' || paymentMethod === 'qr')) {
      filter.paymentMethod = paymentMethod;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pagination
    const skip = (page - 1) * limit;
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalItems = await Ticket.countDocuments(filter);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const tickets = await Ticket.find(filter)
      .sort({ soldAt: -1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
      .skip(skip)
      .limit(limit);
    
    const totalPages = Math.ceil(totalItems / limit);
    
    console.log(`üìä Retrieved ${tickets.length} tickets from ${totalItems} total`);
    
    return NextResponse.json({
      tickets: tickets,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems,
        limit
      },
      meta: {
        generationType: 'UUID',
        ticketFormat: 'T + 5 random chars (6 total)',
        sampleFormat: 'TK7M2X'
      }
    });
    
  } catch (error) {
    console.error('üìñ Ticket Fetch Error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to fetch tickets',
        details: error instanceof Error ? error.message : 'Unknown error'
      }, 
      { status: 500 }
    );
  }
}

// üîç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
export async function generateSampleTickets(count: number = 10): Promise<string[]> {
  const samples: string[] = [];
  const used = new Set<string>();
  
  for (let i = 0; i < count; i++) {
    let ticket;
    do {
      ticket = generateUUIDTicketNumber();
    } while (used.has(ticket));
    
    used.add(ticket);
    samples.push(ticket);
  }
  
  return samples;
}

// üìä ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
export function getUUIDStats() {
  return {
    format: 'T + 5 random characters',
    totalLength: 6,
    possibleCombinations: Math.pow(SAFE_CHARS.length, 5),
    safeCharacters: SAFE_CHARS,
    excludedCharacters: 'I, O, 0, 1 (to avoid confusion)',
    collisionProbability: '1 in ' + Math.pow(SAFE_CHARS.length, 5).toLocaleString()
  };
}