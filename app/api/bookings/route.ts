// app/api/bookings/route.ts - API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Booking
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import Booking from '@/models/Booking';
import Car from '@/models/Car';
import User from '@/models/User';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// GET - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Booking
export async function GET(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    await connectDB();
    
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');
    const driverId = searchParams.get('driver_id');
    const carId = searchParams.get('car_id');
    const page = parseInt(searchParams.get('page') || '1');
    const limit = parseInt(searchParams.get('limit') || '10');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
    const filter: any = {};
    
    if (status) {
      filter.status = status;
    }
    
    if (driverId) {
      filter.driver_id = driverId;
    }
    
    if (carId) {
      filter.car_id = carId;
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pagination
    const skip = (page - 1) * limit;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bookings
    const bookings = await Booking.find(filter)
      .populate({
        path: 'car_id',
        select: 'car_registration car_name car_capacity carType',
        populate: {
          path: 'car_type_id',
          select: 'carType_name'
        }
      })
      .populate({
        path: 'driver_id',
        select: 'name employeeId checkInStatus'
      })
      .populate('tickets.ticket_id', 'ticketNumber price ticketType')
      .sort({ booking_date: -1 })
      .skip(skip)
      .limit(limit);
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalItems = await Booking.countDocuments(filter);
    const totalPages = Math.ceil(totalItems / limit);
    
    return NextResponse.json({
      success: true,
      bookings,
      pagination: {
        currentPage: page,
        totalPages,
        totalItems,
        limit
      }
    });
    
  } catch (error) {
    console.error('Get Bookings Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch bookings' },
      { status: 500 }
    );
  }
}

// POST - ‡∏™‡∏£‡πâ‡∏≤‡∏á Booking ‡πÉ‡∏´‡∏°‡πà
export async function POST(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    await connectDB();
    
    const body = await request.json();
    const { 
      car_registration, 
      passenger_count, 
      tickets, 
      notes,
      expected_departure 
    } = body;
    
    console.log('üìã Booking request:', { car_registration, passenger_count, tickets_count: tickets?.length });
    
    // Validation
    if (!car_registration) {
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡∫•‡∫ª‡∫î' },
        { status: 400 }
      );
    }
    
    if (!passenger_count || passenger_count < 1) {
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫∞‡∫ö‡∫∏‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô' },
        { status: 400 }
      );
    }
    
    if (!tickets || tickets.length === 0) {
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÅ‡∫ô‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫õ‡∫µ‡ªâ' },
        { status: 400 }
      );
    }
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏à‡∏≤‡∏Å‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    const car = await Car.findOne({ car_registration })
      .populate('user_id', 'name employeeId checkInStatus');
    
    if (!car) {
      return NextResponse.json(
        { error: '‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫ª‡∫î' },
        { status: 404 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö check-in ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (car.user_id?.checkInStatus !== 'checked-in') {
      return NextResponse.json(
        { error: '‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡∫ç‡∫±‡∫á‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å' },
        { status: 400 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingBooking = await Booking.findOne({
      car_id: car._id,
      status: { $in: ['booked', 'in_trip'] }
    });
    
    if (existingBooking) {
      return NextResponse.json(
        { error: '‡∫•‡∫ª‡∫î‡∫ô‡∫µ‡ªâ‡∫ñ‡∫∑‡∫Å‡∫à‡∫≠‡∫á‡ªÅ‡∫•‡ªâ‡∫ß ‡∫´‡∫º‡∫∑ ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á' },
        { status: 409 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
    if (passenger_count > car.car_capacity) {
      return NextResponse.json(
        { error: `‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô‡ªÄ‡∫Å‡∫µ‡∫ô‡∫Ñ‡∫ß‡∫≤‡∫°‡∫à‡∫∏‡∫•‡∫ª‡∫î (‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î ${car.car_capacity} ‡∫Ñ‡∫ª‡∫ô)` },
        { status: 400 }
      );
    }
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πã‡∏ß
    const ticketData = tickets.map((ticket: any) => ({
      ticket_id: ticket._id,
      ticket_number: ticket.ticketNumber,
      passenger_count: ticket.passengerCount || 1,
      ticket_type: ticket.ticketType || 'individual'
    }));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Booking
    const booking = new Booking({
      car_id: car._id,
      driver_id: car.user_id._id,
      booked_by: session.user.email || session.user.name,
      booked_passengers: passenger_count,
      car_capacity: car.car_capacity,
      tickets: ticketData,
      notes: notes,
      expected_departure: expected_departure ? new Date(expected_departure) : undefined
    });
    
    await booking.save();
    
    // Populate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    const populatedBooking = await Booking.findById(booking._id)
      .populate({
        path: 'car_id',
        select: 'car_registration car_name car_capacity',
        populate: {
          path: 'car_type_id',
          select: 'carType_name'
        }
      })
      .populate('driver_id', 'name employeeId checkInStatus')
      .populate('tickets.ticket_id', 'ticketNumber price ticketType');
    
    console.log('‚úÖ Booking created successfully:', booking.booking_id);
    
    return NextResponse.json({
      success: true,
      booking: populatedBooking,
      message: `‡∫à‡∫≠‡∫á‡∫•‡∫ª‡∫î‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î! ‡∫•‡∫ª‡∫î ${car.car_registration} ‡∫™‡∫≥‡∫•‡∫±‡∫ö ${passenger_count} ‡∫Ñ‡∫ª‡∫ô`
    });
    
  } catch (error) {
    console.error('Create Booking Error:', error);
    return NextResponse.json(
      { 
        error: 'Failed to create booking',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}