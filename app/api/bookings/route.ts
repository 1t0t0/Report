// app/api/bookings/route.ts - Fixed API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import Booking from '@/models/Booking';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// GET - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin/Staff)
export async function GET(request: Request) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin ‡πÅ‡∏•‡∏∞ staff)
    const session = await getServerSession(authOptions);
    if (!session || !['admin', 'staff'].includes(session.user.role)) {
      return NextResponse.json(
        { error: '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫î‡∫ó‡∫¥‡ªà‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡ªÄ‡∫ö‡∫¥‡ªà‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫≠‡∫á' },
        { status: 401 }
      );
    }

    await connectDB();
    
    // ‡∏£‡∏±‡∏ö query parameters
    const { searchParams } = new URL(request.url);
    const status = searchParams.get('status');
    const limit = parseInt(searchParams.get('limit') || '50');
    const page = parseInt(searchParams.get('page') || '1');
    const search = searchParams.get('search');
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
    const filter: any = {};
    
    // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ status filter ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (status && status !== 'all') {
      filter.status = status;
    }
    
    // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° search functionality
    if (search && search.trim()) {
      const searchTerm = search.trim();
      filter.$or = [
        { bookingNumber: { $regex: searchTerm, $options: 'i' } },
        { 'passengerInfo.name': { $regex: searchTerm, $options: 'i' } },
        { 'passengerInfo.phone': { $regex: searchTerm, $options: 'i' } }
      ];
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pagination
    const skip = (page - 1) * limit;
    
    console.log('üîç Bookings API filter:', filter, 'Page:', page, 'Limit:', limit);
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const bookings = await Booking.find(filter)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .populate('approvedBy', 'name email employeeId')
      .lean(); // ‡πÄ‡∏û‡∏¥‡πà‡∏° lean() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    
    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalCount = await Booking.countDocuments(filter);
    const totalPages = Math.ceil(totalCount / limit);
    
    console.log(`‚úÖ Found ${bookings.length} bookings from ${totalCount} total`);
    
    // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const now = new Date();
    const expiredCount = await Booking.updateMany(
      { 
        status: 'pending', 
        expiresAt: { $lt: now } 
      },
      { 
        $set: { status: 'expired' } 
      }
    );
    
    if (expiredCount.modifiedCount > 0) {
      console.log(`‚è∞ Updated ${expiredCount.modifiedCount} expired bookings`);
      
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      const updatedBookings = await Booking.find(filter)
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .populate('approvedBy', 'name email employeeId')
        .lean();
        
      const updatedTotalCount = await Booking.countDocuments(filter);
      
      return NextResponse.json({
        bookings: updatedBookings.map(booking => ({
          ...booking,
          statusLao: getStatusLao(booking.status)
        })),
        pagination: {
          currentPage: page,
          totalPages: Math.ceil(updatedTotalCount / limit),
          totalCount: updatedTotalCount,
          limit
        }
      });
    }
    
    return NextResponse.json({
      bookings: bookings.map(booking => ({
        ...booking,
        statusLao: getStatusLao(booking.status)
      })),
      pagination: {
        currentPage: page,
        totalPages,
        totalCount,
        limit
      }
    });
    
  } catch (error) {
    console.error('‚ùå Get Bookings Error:', error);
    return NextResponse.json(
      { 
        error: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫î‡∫∂‡∫á‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫à‡∫≠‡∫á',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

// üîß ‡πÄ‡∏û‡∏¥‡πà‡∏° helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
function getStatusLao(status: string): string {
  const statusMap = {
    'pending': '‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡∫Å‡∫≤‡∫ô‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î',
    'approved': '‡∫≠‡∫∞‡∫ô‡∫∏‡∫°‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß',
    'rejected': '‡∫õ‡∫∞‡∫ï‡∫¥‡ªÄ‡∫™‡∫î',
    'expired': '‡ªù‡∫ª‡∫î‡∫≠‡∫≤‡∫ç‡∫∏'
  };
  return statusMap[status as keyof typeof statusMap] || status;
}

// POST - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Public) - ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
export async function POST(request: Request) {
  try {
    await connectDB();
    
    const body = await request.json();
    console.log('Creating new booking with data:', body);
    
    const { passengerInfo, tripDetails, basePrice } = body;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà frontend ‡∏™‡πà‡∏á‡∏°‡∏≤)
    if (!passengerInfo?.name || !passengerInfo?.phone || !tripDetails?.travelDate || !tripDetails?.passengers || !basePrice) {
      return NextResponse.json(
        { error: '‡∫Ç‡∫≤‡∫î‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫à‡∫≥‡ªÄ‡∫õ‡∫±‡∫ô: ‡∫ä‡∫∑‡ªà, ‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó, ‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á, ‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫Ñ‡∫ª‡∫ô, ‡∫•‡∫≤‡∫Ñ‡∫≤' },
        { status: 400 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
    const passengers = parseInt(tripDetails.passengers);
    if (passengers < 1 || passengers > 10) {
      return NextResponse.json(
        { error: '‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫õ‡∫±‡∫ô 1-10 ‡∫Ñ‡∫ª‡∫ô' },
        { status: 400 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ)
    const travelDate = new Date(tripDetails.travelDate);
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    if (travelDate < tomorrow) {
      return NextResponse.json(
        { error: '‡∫ß‡∫±‡∫ô‡∫ó‡∫µ‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫õ‡∫±‡∫ô‡∫°‡∫∑‡ªâ‡∫û‡∫∏‡ªà‡∫á‡∫ô‡∫µ‡ªâ‡ªÄ‡∫õ‡∫±‡∫ô‡∫ï‡∫ª‡ªâ‡∫ô‡ªÑ‡∫õ' },
        { status: 400 }
      );
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const existingBooking = await Booking.findOne({
      'passengerInfo.phone': passengerInfo.phone.trim(),
      'tripDetails.travelDate': {
        $gte: new Date(travelDate.getFullYear(), travelDate.getMonth(), travelDate.getDate()),
        $lt: new Date(travelDate.getFullYear(), travelDate.getMonth(), travelDate.getDate() + 1)
      },
      status: { $in: ['pending', 'approved'] }
    });
    
    if (existingBooking) {
      return NextResponse.json(
        { error: '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ô‡∫µ‡ªâ‡∫°‡∫µ‡∫Å‡∫≤‡∫ô‡∫à‡∫≠‡∫á‡ªÉ‡∫ô‡∫ß‡∫±‡∫ô‡∫î‡∫Ω‡∫ß‡∫Å‡∫±‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß' },
        { status: 409 }
      );
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    const totalAmount = basePrice * passengers;
    
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà frontend ‡∏™‡πà‡∏á‡∏°‡∏≤)
    const bookingData = {
      passengerInfo: {
        name: passengerInfo.name.trim(),
        phone: passengerInfo.phone.trim(),
        email: passengerInfo.email?.trim() || undefined
      },
      tripDetails: {
        pickupLocation: '‡∫à‡∫∏‡∫î‡∫ô‡∫±‡∫î‡∫û‡∫ª‡∫ö', // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        destination: '‡∫ï‡∫ª‡∫ß‡ªÄ‡∫°‡∫∑‡∫≠‡∫á', // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà  
        travelDate: travelDate,
        travelTime: '08:00', // ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
        passengers: passengers
      },
      pricing: {
        basePrice: basePrice,
        totalAmount: totalAmount
      }
    };
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    const booking = await Booking.createBooking(bookingData);
    
    console.log('Booking created successfully:', booking.bookingNumber);
    
    return NextResponse.json({
      success: true,
      booking: booking,
      message: '‡∫™‡ªâ‡∫≤‡∫á‡∫Å‡∫≤‡∫ô‡∫à‡∫≠‡∫á‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î'
    });
    
  } catch (error) {
    console.error('Create Booking Error:', error);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    if (error instanceof Error && error.message.includes('duplicate')) {
      return NextResponse.json(
        { error: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡ªâ‡∫≤‡∫á‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡∫Å‡∫≤‡∫ô‡∫à‡∫≠‡∫á ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫•‡∫≠‡∫á‡ªÉ‡ªù‡ªà' },
        { status: 409 }
      );
    }
    
    return NextResponse.json(
      { 
        error: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡ªâ‡∫≤‡∫á‡∫Å‡∫≤‡∫ô‡∫à‡∫≠‡∫á',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}