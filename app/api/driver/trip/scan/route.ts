// app/api/driver/trip/scan/route.ts - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import DriverTrip from '@/models/DriverTrip';
import Ticket from '@/models/Ticket';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

// POST - ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏ï‡∏±‡πã‡∏ß (‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || session.user.role !== 'driver') {
      return NextResponse.json(
        { error: 'Unauthorized - Only drivers can access this endpoint' },
        { status: 401 }
      );
    }

    await connectDB();
    
    const body = await request.json();
    const { ticketId, qrData } = body;
    
    console.log('Scan request:', { ticketId, qrData });
    
    let ticketNumber = ticketId;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• QR Code (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (qrData) {
      try {
        const parsedQRData = JSON.parse(qrData);
        if (parsedQRData.forDriverOnly && parsedQRData.ticketNumber) {
          ticketNumber = parsedQRData.ticketNumber;
          console.log('Using ticket number from QR:', ticketNumber);
        }
      } catch (error) {
        console.warn('Failed to parse QR data, using ticketId as fallback');
      }
    }
    
    if (!ticketNumber || !ticketNumber.trim()) {
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ï‡∫±‡ªâ‡∫ß' },
        { status: 400 }
      );
    }
    
    const driverId = session.user.id;
    const today = new Date().toISOString().split('T')[0];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const activeTrip = await DriverTrip.findOne({
      driver_id: driverId,
      date: today,
      status: 'in_progress'
    });
    
    if (!activeTrip) {
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô' },
        { status: 400 }
      );
    }
    
    console.log('Active trip found:', activeTrip._id);
    
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ticket ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ticketNumber
    const ticket = await Ticket.findOne({ ticketNumber: ticketNumber.trim() });
    if (!ticket) {
      return NextResponse.json(
        { error: `‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ï‡∫±‡ªâ‡∫ß‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ ${ticketNumber}` },
        { status: 404 }
      );
    }
    
    console.log('Ticket found:', ticket._id, ticket.ticketNumber);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ticket ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const ticketAlreadyScanned = activeTrip.scanned_tickets.some(
      (scan: any) => scan.ticket_id.toString() === ticket._id.toString()
    );
    
    if (ticketAlreadyScanned) {
      return NextResponse.json(
        { error: `‡∫ï‡∫±‡ªâ‡∫ß‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ ${ticketNumber} ‡∫ñ‡∫∑‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß` },
        { status: 400 }
      );
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (activeTrip.current_passengers >= activeTrip.car_capacity) {
      return NextResponse.json(
        { error: `‡∫•‡∫ª‡∫î‡ªÄ‡∫ï‡∫±‡∫°‡ªÅ‡∫•‡ªâ‡∫ß! ‡∫Ñ‡∫ß‡∫≤‡∫°‡∫à‡∫∏‡∫™‡∫π‡∫á‡∫™‡∫∏‡∫î ${activeTrip.car_capacity} ‡∫Ñ‡∫ª‡∫ô` },
        { status: 400 }
      );
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£
    const passengerOrder = activeTrip.current_passengers + 1;
    
    activeTrip.scanned_tickets.push({
      ticket_id: ticket._id,
      scanned_at: new Date(),
      passenger_order: passengerOrder
    });
    
    activeTrip.current_passengers = passengerOrder;
    
    // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÅ‡∏Ñ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const is80PercentReached = activeTrip.current_passengers >= activeTrip.required_passengers;
    activeTrip.is_80_percent_reached = is80PercentReached;
    
    // ‚úÖ ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏´‡πâ driver ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏≠‡∏á
    // if (is80PercentReached) {
    //   activeTrip.status = 'completed';
    //   activeTrip.completed_at = new Date();
    // }
    
    await activeTrip.save();
    
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
    let message = `‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô: ${activeTrip.current_passengers}/${activeTrip.car_capacity} ‡∫Ñ‡∫ª‡∫ô`;
    let statusMessage = '';
    
    if (is80PercentReached && activeTrip.current_passengers < activeTrip.car_capacity) {
      statusMessage = `üéØ ‡∫Ñ‡∫ª‡∫ö‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡ªù‡∫≤‡∫ç ${activeTrip.required_passengers} ‡∫Ñ‡∫ª‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß! ‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫™‡∫∑‡∫ö‡∫ï‡ªç‡ªà‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫´‡∫º‡∫∑‡∫õ‡∫¥‡∫î‡∫Æ‡∫≠‡∫ö‡ªÑ‡∫î‡ªâ`;
    } else if (activeTrip.current_passengers === activeTrip.car_capacity) {
      statusMessage = `üöå ‡∫•‡∫ª‡∫î‡ªÄ‡∫ï‡∫±‡∫°‡ªÅ‡∫•‡ªâ‡∫ß! ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡∫¥‡∫î‡∫Æ‡∫≠‡∫ö`;
    } else {
      const remaining = activeTrip.required_passengers - activeTrip.current_passengers;
      if (remaining > 0) {
        statusMessage = `‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫≠‡∫µ‡∫Å ${remaining} ‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡∫ö‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡ªù‡∫≤‡∫ç`;
      }
    }
    
    console.log('Trip updated successfully:', {
      tripId: activeTrip._id,
      currentPassengers: activeTrip.current_passengers,
      requiredPassengers: activeTrip.required_passengers,
      is80PercentReached: is80PercentReached
    });
    
    return NextResponse.json({
      success: true,
      trip_number: activeTrip.trip_number,
      current_passengers: activeTrip.current_passengers,
      required_passengers: activeTrip.required_passengers,
      car_capacity: activeTrip.car_capacity,
      occupancy_percentage: Math.round((activeTrip.current_passengers / activeTrip.car_capacity) * 100),
      progress_percentage: Math.round((activeTrip.current_passengers / activeTrip.required_passengers) * 100),
      is_80_percent_reached: is80PercentReached,
      can_complete_trip: true, // ‚úÖ ‡πÄ‡∏™‡∏°‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡πÑ‡∏î‡πâ
      trip_completed: false, // ‚úÖ ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
      message: message,
      status_message: statusMessage,
      ticket_info: {
        ticket_id: ticket._id,
        ticket_number: ticket.ticketNumber,
        price: ticket.price,
        passenger_order: passengerOrder
      }
    });

  } catch (error) {
    console.error('Scan QR Code Error:', error);
    return NextResponse.json(
      { 
        error: error instanceof Error ? error.message : 'Failed to scan QR code',
        details: error instanceof Error ? error.stack : 'Unknown error occurred'
      },
      { status: 500 }
    );
  }
}