// app/api/driver/trip/scan/route.ts - Enhanced with Assignment Check
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import DriverTrip from '@/models/DriverTrip';
import Ticket from '@/models/Ticket';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';

export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session || session.user.role !== 'driver') {
      return NextResponse.json(
        { error: 'Unauthorized - Only drivers can access this endpoint' },
        { status: 401 }
      );
    }

    await connectDB();
    
    const body = await request.json();
    const { ticketId, qrData } = body;
    
    console.log('üîç Scan request received:', { ticketId, qrData });
    
    let ticketNumber = ticketId;
    let groupTicketData = null;
    
    // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QR Code Data ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Group Ticket
    if (qrData) {
      try {
        console.log('üì± Processing QR Data:', qrData);
        
        const parsedQRData = JSON.parse(qrData);
        console.log('‚úÖ Parsed QR Data:', parsedQRData);
        
        if (parsedQRData.ticketType === 'group' && parsedQRData.ticketNumber) {
          ticketNumber = parsedQRData.ticketNumber;
          groupTicketData = parsedQRData;
          console.log('üé´ Group Ticket QR detected:', {
            ticketNumber,
            passengerCount: parsedQRData.passengerCount,
            totalPrice: parsedQRData.totalPrice
          });
        } else if (parsedQRData.ticketNumber) {
          ticketNumber = parsedQRData.ticketNumber;
          console.log('üé´ Individual Ticket QR (JSON) detected:', ticketNumber);
        }
      } catch (parseError) {
        console.log('‚ö†Ô∏è QR data is not JSON, treating as plain string:', qrData);
        if (typeof qrData === 'string' && qrData.trim()) {
          ticketNumber = qrData.trim();
          console.log('üìù Using QR data as ticket number:', ticketNumber);
        }
      }
    }
    
    if (!ticketNumber || !ticketNumber.trim()) {
      console.error('‚ùå No ticket number provided');
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ‡ªà‡∫õ‡∫µ‡ªâ' },
        { status: 400 }
      );
    }

    const driverId = session.user.id;
    const today = new Date().toISOString().split('T')[0];
    
    // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const activeTrip = await DriverTrip.findOne({
      driver_id: driverId,
      date: today,
      status: 'in_progress'
    });
    
    if (!activeTrip) {
      console.error('‚ùå No active trip found for driver:', driverId);
      return NextResponse.json(
        { error: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫Å‡∫≤‡∫ô‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á‡∫Å‡ªà‡∫≠‡∫ô' },
        { status: 400 }
      );
    }
    
    console.log('üöå Active trip found:', {
      tripId: activeTrip._id,
      tripNumber: activeTrip.trip_number,
      currentPassengers: activeTrip.current_passengers,
      capacity: activeTrip.car_capacity
    });
    
    // ‚úÖ 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ticket ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ticketNumber
    const ticket = await Ticket.findOne({ ticketNumber: ticketNumber.trim() });
    if (!ticket) {
      console.error('‚ùå Ticket not found:', ticketNumber);
      return NextResponse.json(
        { error: `‡∫ö‡ªç‡ªà‡∫û‡∫ª‡∫ö‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫õ‡∫µ‡ªâ‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ ${ticketNumber}` },
        { status: 404 }
      );
    }
    
    console.log('üé´ Ticket found:', {
      ticketNumber: ticket.ticketNumber,
      ticketType: ticket.ticketType,
      passengerCount: ticket.passengerCount,
      price: ticket.price,
      assignedDriverId: ticket.assignedDriverId,
      isScanned: ticket.isScanned
    });
    
    // ‚úÖ 3. NEW: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Assignment - ‡∏ï‡∏±‡πã‡∏ß‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å assign ‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (ticket.assignedDriverId) {
      const assignedDriverId = ticket.assignedDriverId.toString();
      const currentDriverId = driverId.toString();
      
      if (assignedDriverId !== currentDriverId) {
        console.error('‚ùå Ticket assigned to different driver:', {
          ticketNumber: ticket.ticketNumber,
          assignedTo: assignedDriverId,
          currentDriver: currentDriverId
        });
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å assign
        const assignedDriver = await require('@/models/User').default.findById(assignedDriverId)
          .select('name employeeId');
        
        return NextResponse.json(
          { 
            error: `‚ùå ‡∫õ‡∫µ‡ªâ‡∫ô‡∫µ‡ªâ‡∫ñ‡∫∑‡∫Å‡∫°‡∫≠‡∫ö‡ªù‡∫≤‡∫ç‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡∫Ñ‡∫ª‡∫ô‡∫≠‡∫∑‡ªà‡∫ô`,
            details: {
              message: assignedDriver 
                ? `‡∫°‡∫≠‡∫ö‡ªù‡∫≤‡∫ç‡ªÉ‡∫´‡ªâ: ${assignedDriver.name} (${assignedDriver.employeeId})`
                : '‡∫°‡∫≠‡∫ö‡ªù‡∫≤‡∫ç‡ªÉ‡∫´‡ªâ‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡∫Ñ‡∫ª‡∫ô‡∫≠‡∫∑‡ªà‡∫ô',
              assignedDriverInfo: assignedDriver || null,
              recommendation: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫≤‡∫ç‡∫õ‡∫µ‡ªâ'
            }
          },
          { status: 403 } // Forbidden
        );
      } else {
        console.log('‚úÖ Ticket assignment verified: assigned to current driver');
      }
    } else {
      // ‡∏ï‡∏±‡πã‡∏ß‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å assign ‡πÉ‡∏´‡πâ‡πÉ‡∏Ñ‡∏£ - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏î‡πâ (backward compatibility)
      console.log('‚ö†Ô∏è Ticket has no assignment - allowing scan for backward compatibility');
    }
    
    // ‚úÖ 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ticket ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const ticketUsedInSystem = await DriverTrip.findOne({
      'scanned_tickets.ticket_id': ticket._id
    });
    
    if (ticketUsedInSystem) {
      const usedByTrip = await DriverTrip.findOne({
        'scanned_tickets.ticket_id': ticket._id
      }).populate('driver_id', 'name employeeId');
      
      const scanDetails = usedByTrip?.scanned_tickets.find(
        (scan: any) => scan.ticket_id.toString() === ticket._id.toString()
      );
      
      const usedByDriverName = usedByTrip?.driver_id?.name || 'Unknown';
      const usedByEmployeeId = usedByTrip?.driver_id?.employeeId || 'Unknown';
      const scannedAt = scanDetails?.scanned_at ? new Date(scanDetails.scanned_at).toLocaleString('lo-LA') : 'Unknown';
      
      console.error('‚ùå Ticket already used:', {
        ticketNumber: ticket.ticketNumber,
        usedBy: usedByDriverName,
        usedAt: scannedAt
      });
      
      return NextResponse.json(
        { 
          error: `‚ùå ‡∫õ‡∫µ‡ªâ‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ ${ticketNumber} ‡∫ñ‡∫∑‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡ªÑ‡∫õ‡ªÅ‡∫•‡ªâ‡∫ß`,
          details: {
            message: `‡∫ñ‡∫∑‡∫Å‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡ªÇ‡∫î‡∫ç: ${usedByDriverName} (${usedByEmployeeId})`,
            scannedAt: `‡ªÄ‡∫ß‡∫•‡∫≤: ${scannedAt}`,
            tripId: usedByTrip?._id,
            usedByDriver: {
              name: usedByDriverName,
              employeeId: usedByEmployeeId
            }
          }
        },
        { status: 400 }
      );
    }
    
    // ‚úÖ 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏£‡∏ñ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Group Ticket
    const passengersToAdd = ticket.ticketType === 'group' ? ticket.passengerCount : 1;
    const newTotalPassengers = activeTrip.current_passengers + passengersToAdd;
    
    console.log('üë• Passenger calculation:', {
      ticketType: ticket.ticketType,
      passengersToAdd,
      currentPassengers: activeTrip.current_passengers,
      newTotal: newTotalPassengers,
      carCapacity: activeTrip.car_capacity
    });
    
    if (newTotalPassengers > activeTrip.car_capacity) {
      console.error('‚ùå Car capacity exceeded:', {
        newTotal: newTotalPassengers,
        capacity: activeTrip.car_capacity
      });
      return NextResponse.json(
        { error: `‡∫•‡∫ª‡∫î‡∫à‡∫∞‡ªÄ‡∫ï‡∫±‡∫°! ‡∫õ‡∫±‡∫î‡∫à‡∫∏‡∫ö‡∫±‡∫ô ${activeTrip.current_passengers} ‡∫Ñ‡∫ª‡∫ô + ${passengersToAdd} ‡∫Ñ‡∫ª‡∫ô = ${newTotalPassengers} ‡∫Ñ‡∫ª‡∫ô (‡∫Ñ‡∫ß‡∫≤‡∫°‡∫à‡∫∏: ${activeTrip.car_capacity} ‡∫Ñ‡∫ª‡∫ô)` },
        { status: 400 }
      );
    }
    
    // ‚úÖ 6. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Group Ticket)
    const passengerOrder = activeTrip.current_passengers + 1;
    
    activeTrip.scanned_tickets.push({
      ticket_id: ticket._id,
      scanned_at: new Date(),
      passenger_order: passengerOrder
    });
    
    activeTrip.current_passengers = newTotalPassengers;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó is_80_percent_reached
    const is80PercentReached = activeTrip.current_passengers >= activeTrip.required_passengers;
    activeTrip.is_80_percent_reached = is80PercentReached;
    
    await activeTrip.save();
    
    // ‚úÖ 7. NEW: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ticket ‡πÄ‡∏õ‡πá‡∏ô "scanned"
    try {
      ticket.isScanned = true;
      ticket.scannedAt = new Date();
      ticket.scannedBy = driverId;
      ticket.tripId = activeTrip._id;
      await ticket.save();
      
      console.log('‚úÖ Ticket marked as scanned:', {
        ticketNumber: ticket.ticketNumber,
        scannedBy: driverId,
        tripId: activeTrip._id
      });
    } catch (ticketUpdateError) {
      console.error('‚ö†Ô∏è Failed to update ticket scan status:', ticketUpdateError);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏ô‡∏µ‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - trip ‡∏¢‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    }
    
    console.log('‚úÖ Trip updated successfully:', {
      tripNumber: activeTrip.trip_number,
      currentPassengers: activeTrip.current_passengers,
      required: activeTrip.required_passengers,
      is80PercentReached
    });
    
    // ‚úÖ 8. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Group Ticket ‡πÅ‡∏•‡∏∞ Assignment
    let message = '';
    let statusMessage = '';
    
    if (ticket.ticketType === 'group') {
      message = `‚úÖ ‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫õ‡∫µ‡ªâ‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫°‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î: +${passengersToAdd} ‡∫Ñ‡∫ª‡∫ô (‡∫•‡∫ß‡∫° ${activeTrip.current_passengers}/${activeTrip.car_capacity} ‡∫Ñ‡∫ª‡∫ô)`;
    } else {
      message = `‚úÖ ‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î: ${activeTrip.current_passengers}/${activeTrip.car_capacity} ‡∫Ñ‡∫ª‡∫ô`;
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö assignment
    if (ticket.assignedDriverId && ticket.assignedDriverId.toString() === driverId.toString()) {
      message += ' üéØ (‡∫õ‡∫µ‡ªâ‡∫ó‡∫µ‡ªà‡ªÑ‡∫î‡ªâ‡∫Æ‡∫±‡∫ö‡∫°‡∫≠‡∫ö‡ªù‡∫≤‡∫ç)';
    }
    
    if (is80PercentReached && activeTrip.current_passengers < activeTrip.car_capacity) {
      statusMessage = `üéØ ‡∫Ñ‡∫ª‡∫ö‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡ªù‡∫≤‡∫ç ${activeTrip.required_passengers} ‡∫Ñ‡∫ª‡∫ô‡ªÅ‡∫•‡ªâ‡∫ß! ‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫™‡∫∑‡∫ö‡∫ï‡ªç‡ªà‡∫™‡∫∞‡ªÅ‡∫Å‡∫ô‡∫´‡∫º‡∫∑‡∫õ‡∫¥‡∫î‡∫Æ‡∫≠‡∫ö‡ªÑ‡∫î‡ªâ`;
    } else if (activeTrip.current_passengers === activeTrip.car_capacity) {
      statusMessage = `üöå ‡∫•‡∫ª‡∫î‡ªÄ‡∫ï‡∫±‡∫°‡ªÅ‡∫•‡ªâ‡∫ß! ‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡∫¥‡∫î‡∫Æ‡∫≠‡∫ö`;
    } else {
      const remaining = activeTrip.required_passengers - activeTrip.current_passengers;
      if (remaining > 0) {
        statusMessage = `‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫≠‡∫µ‡∫Å ${remaining} ‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫û‡∫∑‡ªà‡∫≠‡∫Ñ‡∫ª‡∫ö‡ªÄ‡∫õ‡∫ª‡ªâ‡∫≤‡ªù‡∫≤‡∫ç`;
      }
    }
    
    // ‚úÖ 9. Response ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Group Ticket ‡πÅ‡∏•‡∏∞ Assignment Info
    const responseData = {
      success: true,
      trip_number: activeTrip.trip_number,
      current_passengers: activeTrip.current_passengers,
      required_passengers: activeTrip.required_passengers,
      car_capacity: activeTrip.car_capacity,
      occupancy_percentage: Math.round((activeTrip.current_passengers / activeTrip.car_capacity) * 100),
      progress_percentage: Math.round((activeTrip.current_passengers / activeTrip.required_passengers) * 100),
      is_80_percent_reached: is80PercentReached,
      can_complete_trip: true,
      trip_completed: false,
      message: message,
      status_message: statusMessage,
      
      // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏Å‡∏ô
      ticket_info: {
        ticket_id: ticket._id,
        ticket_number: ticket.ticketNumber,
        ticket_type: ticket.ticketType,
        passenger_count: ticket.passengerCount,
        price: ticket.price,
        price_per_person: ticket.pricePerPerson,
        passenger_order: passengerOrder,
        passengers_added: passengersToAdd,
        was_assigned: !!ticket.assignedDriverId,
        assignment_verified: ticket.assignedDriverId?.toString() === driverId.toString()
      },
      
      // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Group Ticket
      group_ticket_info: ticket.ticketType === 'group' ? {
        is_group_ticket: true,
        total_passengers_in_group: ticket.passengerCount,
        price_breakdown: {
          price_per_person: ticket.pricePerPerson,
          total_group_price: ticket.price,
          calculation: `‚Ç≠${ticket.pricePerPerson.toLocaleString()} √ó ${ticket.passengerCount} = ‚Ç≠${ticket.price.toLocaleString()}`
        }
      } : {
        is_group_ticket: false
      },
      
      // ‚úÖ NEW: Assignment Info
      assignment_info: {
        was_assigned: !!ticket.assignedDriverId,
        assigned_to_current_driver: ticket.assignedDriverId?.toString() === driverId.toString(),
        verification_status: ticket.assignedDriverId 
          ? (ticket.assignedDriverId.toString() === driverId.toString() ? 'verified' : 'wrong_driver')
          : 'no_assignment'
      }
    };
    
    console.log('üì§ Sending response:', responseData);
    
    return NextResponse.json(responseData);

  } catch (error) {
    console.error('üí• Scan QR Code Error:', error);
    
    const errorMessage = error instanceof Error ? error.message : 'Failed to scan QR code';
    const errorStack = error instanceof Error ? error.stack : 'No stack trace';
    
    console.error('Error details:', {
      message: errorMessage,
      stack: errorStack
    });
    
    return NextResponse.json(
      { 
        error: errorMessage,
        details: errorStack,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    );
  }
}