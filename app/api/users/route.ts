// app/api/users/route.ts - Updated to support phone-based user creation
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import bcrypt from 'bcryptjs';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// Type definitions
interface UserData {
  name: string;
  phone: string; // Changed from email to phone as primary field
  email?: string; // Made email optional
  password: string;
  role: string;
  birthDate?: Date;
  employeeId?: string;
  stationId?: string;
  stationName?: string;
  location?: string;
  idCardNumber?: string;
  idCardImage?: string;
  userImage?: string;
  status?: string;
  checkInStatus?: string;
}

interface UserResponse extends Omit<UserData, 'password'> {
  _id: string;
  createdAt?: Date;
  updatedAt?: Date;
  [key: string]: any;
}

// Utility function to clean phone number
const cleanPhoneNumber = (phone: string): string => {
  return phone.replace(/\D/g, ''); // Remove all non-digits
};

// Utility function to generate auto ID based on role and phone
const generateAutoId = (role: string, phone: string): string => {
  const date = new Date();
  const year = date.getFullYear().toString().slice(-2);
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  const dateCode = `${year}${month}${day}`;
  
  // Use last 3 digits of phone number as unique identifier
  const phoneLastDigits = phone.slice(-3);
  
  const rolePrefix = {
    'driver': 'D',
    'staff': 'S',
    'admin': 'A',
    'station': 'ST'
  };
  
  const prefix = rolePrefix[role as keyof typeof rolePrefix] || 'U';
  return `${prefix}-${dateCode}-${phoneLastDigits}`;
};

// POST - Create a new user with phone number
export async function POST(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { role } = body;

    // Staff can only create drivers, Admin can create all types
    if (session.user.role === 'staff') {
      if (role !== 'driver') {
        return NextResponse.json(
          { error: 'Staff can only create drivers' },
          { status: 403 }
        );
      }
    } else if (session.user.role !== 'admin') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    await connectDB();
    
    console.log('User creation request body:', body);
    
    const { name, phone, email, password, birthDate, location, idCardNumber, idCardImage, userImage } = body;
    
    // Validate required fields
    if (!name || !phone || !password || !role) {
      return NextResponse.json(
        { error: 'Name, phone, password, and role are required' },
        { status: 400 }
      );
    }
    
    // Clean and validate phone number
    const cleanPhone = cleanPhoneNumber(phone);
    if (cleanPhone.length !== 10) {
      return NextResponse.json(
        { error: 'Phone number must be exactly 10 digits' },
        { status: 400 }
      );
    }
    
    // Check if user already exists with this phone number
    const existingUser = await User.findOne({ phone: cleanPhone });
    if (existingUser) {
      return NextResponse.json(
        { error: 'User with this phone number already exists' },
        { status: 409 }
      );
    }
    
    // Check email uniqueness if provided
    if (email) {
      const existingEmailUser = await User.findOne({ email });
      if (existingEmailUser) {
        return NextResponse.json(
          { error: 'User with this email already exists' },
          { status: 409 }
        );
      }
    }
    
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Generate auto ID
    const autoGeneratedId = generateAutoId(role, cleanPhone);
    
    const userData: UserData = {
      name,
      phone: cleanPhone,
      email: email || undefined, // Only include if provided
      password: hashedPassword,
      role,
      birthDate: birthDate ? new Date(birthDate) : undefined
    };
    
    // Add role-specific fields
    if (role === 'driver') {
      userData.employeeId = autoGeneratedId;
      userData.status = 'active';
      userData.checkInStatus = 'checked-out';
      
      if (idCardNumber) userData.idCardNumber = idCardNumber;
      if (idCardImage) userData.idCardImage = idCardImage;
      if (userImage) userData.userImage = userImage;
      
      console.log('Creating driver with data:', JSON.stringify(userData, null, 2));
    } else if (role === 'staff') {
      userData.employeeId = autoGeneratedId;
      
      if (idCardNumber) userData.idCardNumber = idCardNumber;
      if (idCardImage) userData.idCardImage = idCardImage;
      if (userImage) userData.userImage = userImage;
      
      console.log('Creating staff with data:', userData);
    } else if (role === 'station') {
      userData.stationId = autoGeneratedId;
      userData.stationName = name;
      userData.location = location;
      
      console.log('Creating station with data:', userData);
    } else if (role === 'admin') {
      userData.employeeId = autoGeneratedId;
      console.log('Creating admin with data:', userData);
    }
    
    // Create user
    const newUser = await User.create(userData);
    console.log(`User created successfully with ${role === 'station' ? 'stationId' : 'employeeId'}: ${autoGeneratedId}`);
    
    // Remove password from response
    const userResponse = newUser.toObject() as UserResponse;
    delete (userResponse as any).password;
    
    return NextResponse.json(userResponse);
  } catch (error) {
    console.error('Create User Error:', error);
    return NextResponse.json(
      { error: 'Failed to create user: ' + (error as Error).message },
      { status: 500 }
    );
  }
}

// GET method remains mostly the same
export async function GET(request: Request) {
  try {
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    await connectDB();
    
    const { searchParams } = new URL(request.url);
    const role = searchParams.get('role');
    
    const query: Record<string, any> = {};
    
    if (session.user.role === 'admin') {
      if (role) {
        query.role = role;
      }
    } else if (session.user.role === 'staff') {
      query.role = 'driver';
    } else {
      return NextResponse.json(
        { error: 'Forbidden' },
        { status: 403 }
      );
    }
    
    console.log('Finding users with query:', query);
    
    const users = await User.find(query).select('-password');
    
    console.log('Found users count:', users.length);
    if (users.length > 0) {
      console.log('First user fields:', Object.keys(users[0].toObject()));
    }
    
    return NextResponse.json(users);
  } catch (error) {
    console.error('Get Users Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch users: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    );
  }
}