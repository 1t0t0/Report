// app/api/users/route.ts - Updated to allow Staff create Drivers
import { NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import User from '@/models/User';
import bcrypt from 'bcryptjs';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// POST - Create a new user - Allow Staff to create Drivers
export async function POST(request: Request) {
  try {
    // Check authorization - Allow Staff to create Drivers
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Parse request body to check user role being created
    const body = await request.json();
    const { role } = body;

    // Staff can only create drivers, Admin can create all types
    if (session.user.role === 'staff') {
      if (role !== 'driver') {
        return NextResponse.json(
          { error: 'Staff can only create drivers' },
          { status: 403 }
        );
      }
    } else if (session.user.role !== 'admin') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    await connectDB();
    
    console.log('User creation request body:', body);
    
    const { name, email, password, phone, birthDate, location, idCardNumber, idCardImage, userImage } = body;
    
    // Validate required fields
    if (!name || !email || !password || !role) {
      return NextResponse.json(
        { error: 'Name, email, password, and role are required' },
        { status: 400 }
      );
    }
    
    // Check if user already exists
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return NextResponse.json(
        { error: 'User with this email already exists' },
        { status: 409 }
      );
    }
    
    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Generate auto numbers for different roles
    let autoGeneratedId = '';
    let userData: any = {
      name,
      email,
      password: hashedPassword,
      role,
      birthDate: birthDate ? new Date(birthDate) : undefined
    };
    
    // รูปแบบ Auto Number แบบไทย (ตัวอักษรบอกประเภท-ปีเดือนวัน-เลขลำดับ)
    const date = new Date();
    const year = date.getFullYear().toString().slice(-2);
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const dateCode = `${year}${month}${day}`;
    
    // Add role-specific fields and auto-generate IDs
    if (role === 'driver') {
      // Find the last driver to increment the counter
      const latestDriver = await User.findOne({ role: 'driver' }).sort({ employeeId: -1 });
      let counter = 1;
      
      if (latestDriver && latestDriver.employeeId) {
        // Try to extract counter from last employeeId
        const match = latestDriver.employeeId.match(/\d+$/);
        if (match) {
          counter = parseInt(match[0]) + 1;
        }
      }
      
      // Format counter as 3 digits
      const counterStr = counter.toString().padStart(3, '0');
      autoGeneratedId = `D-${dateCode}-${counterStr}`;
      
      userData.employeeId = autoGeneratedId;
      if (phone) userData.phone = phone;
      userData.status = 'active';
      userData.checkInStatus = 'checked-out';
      
      // เพิ่มส่วนนี้เพื่อบันทึกข้อมูลรูปภาพ
      if (idCardNumber) userData.idCardNumber = idCardNumber;
      if (idCardImage) userData.idCardImage = idCardImage;
      if (userImage) userData.userImage = userImage;

      if (idCardImage) console.log('Got idCardImage:', idCardImage.substring(0, 50) + '...');
      if (userImage) console.log('Got userImage:', userImage.substring(0, 50) + '...');
      
      // เพิ่มข้อมูลรูปภาพ
      userData.idCardImage = idCardImage;
      userData.userImage = userImage;
      
      console.log('Creating driver with data:', JSON.stringify(userData, null, 2));
      
      console.log('Creating driver with data:', userData);
    } else if (role === 'staff') {
      // Find the last staff to increment the counter
      const latestStaff = await User.findOne({ role: 'staff' }).sort({ employeeId: -1 });
      let counter = 1;
      
      if (latestStaff && latestStaff.employeeId) {
        const match = latestStaff.employeeId.match(/\d+$/);
        if (match) {
          counter = parseInt(match[0]) + 1;
        }
      }
      
      const counterStr = counter.toString().padStart(3, '0');
      autoGeneratedId = `S-${dateCode}-${counterStr}`;
      
      userData.employeeId = autoGeneratedId;
      if (phone) userData.phone = phone;
      
      // เพิ่มส่วนนี้เพื่อบันทึกข้อมูลรูปภาพสำหรับ staff
      if (idCardNumber) userData.idCardNumber = idCardNumber;
      if (idCardImage) userData.idCardImage = idCardImage;
      if (userImage) userData.userImage = userImage;
      if (phone) userData.phone = phone;
      console.log('Creating staff with data:', userData);
    } else if (role === 'station') {
      // Find the last station to increment the counter
      const latestStation = await User.findOne({ role: 'station' }).sort({ stationId: -1 });
      let counter = 1;
      
      if (latestStation && latestStation.stationId) {
        const match = latestStation.stationId.match(/\d+$/);
        if (match) {
          counter = parseInt(match[0]) + 1;
        }
      }
      
      const counterStr = counter.toString().padStart(3, '0');
      autoGeneratedId = `ST-${dateCode}-${counterStr}`;
      
      userData.stationId = autoGeneratedId;
      userData.stationName = name;
      userData.location = location;
      if (phone) userData.phone = phone;
      
      console.log('Creating station with data:', userData);
    } else if (role === 'admin') {
      // Find the last admin to increment the counter
      const latestAdmin = await User.findOne({ role: 'admin' }).sort({ employeeId: -1 });
      let counter = 1;
      
      if (latestAdmin && latestAdmin.employeeId) {
        const match = latestAdmin.employeeId.match(/\d+$/);
        if (match) {
          counter = parseInt(match[0]) + 1;
        }
      }
      
      const counterStr = counter.toString().padStart(3, '0');
      autoGeneratedId = `A-${dateCode}-${counterStr}`;
      
      userData.employeeId = autoGeneratedId;
      if (phone) userData.phone = phone;
      console.log('Creating admin with data:', userData);
    }
    
    // Create user with auto-generated ID
    const newUser = await User.create(userData);
    console.log(`User created successfully with ${role === 'station' ? 'stationId' : 'employeeId'}: ${autoGeneratedId}`);
    
    // Remove password from response
    const userResponse = newUser.toObject();
    delete userResponse.password;
    
    return NextResponse.json(userResponse);
  } catch (error) {
    console.error('Create User Error:', error);
    return NextResponse.json(
      { error: 'Failed to create user: ' + (error as Error).message },
      { status: 500 }
    );
  }
}

// GET method remains the same - Allow Staff to see Drivers
export async function GET(request: Request) {
  try {
    // Check authorization
    const session = await getServerSession(authOptions);
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    await connectDB();
    
    // Get query parameters (optional)
    const { searchParams } = new URL(request.url);
    const role = searchParams.get('role');
    
    // Build query based on user role
    let query: any = {};
    
    if (session.user.role === 'admin') {
      // Admin can see all users
      if (role) {
        query.role = role;
      }
    } else if (session.user.role === 'staff') {
      // Staff can only see drivers
      query.role = 'driver';
    } else {
      // Other roles cannot access this endpoint
      return NextResponse.json(
        { error: 'Forbidden' },
        { status: 403 }
      );
    }
    
    console.log('Finding users with query:', query);
    
    // แก้ไขตรงนี้ - แน่ใจว่าเราดึงฟิลด์ userImage ด้วย
    const projection = { password: 0 }; // ไม่ดึงเฉพาะ password
    const users = await User.find(query, projection);
    
    console.log('Found users count:', users.length);
    if (users.length > 0) {
      console.log('First user fields:', Object.keys(users[0].toObject()));
      console.log('Sample user userImage:', users[0].userImage ? 'exists' : 'missing');
    }
    
    return NextResponse.json(users);
  } catch (error) {
    console.error('Get Users Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch users: ' + (error instanceof Error ? error.message : 'Unknown error') },
      { status: 500 }
    );
  }
}