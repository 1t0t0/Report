// app/dashboard/users/components/AutoCheckoutModal.tsx - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö API ‡πÉ‡∏´‡∏°‡πà
import React, { useState, useEffect } from 'react';
import { FiClock, FiSave, FiX, FiSettings, FiRefreshCw, FiInfo } from 'react-icons/fi';
import notificationService from '@/lib/notificationService';

interface AutoCheckoutModalProps {
  onClose: () => void;
  onSuccess: () => void;
}

interface AutoCheckoutSettings {
  enabled: boolean;
  checkoutTime: string; // Format: "HH:MM"
  timezone: string;
  lastRun?: string;
  affectedUsers?: number;
}

const AutoCheckoutModal: React.FC<AutoCheckoutModalProps> = ({ onClose, onSuccess }) => {
  const [loading, setLoading] = useState(false);
  const [savingSettings, setSavingSettings] = useState(false);
  const [settings, setSettings] = useState<AutoCheckoutSettings>({
    enabled: false,
    checkoutTime: '17:30',
    timezone: 'Asia/Vientiane',
    lastRun: '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô',
    affectedUsers: 0
  });

  const [manualCheckoutLoading, setManualCheckoutLoading] = useState(false);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  useEffect(() => {
    fetchCurrentSettings();
  }, []);

  const fetchCurrentSettings = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/admin/auto-checkout/settings');
      if (response.ok) {
        const data = await response.json();
        setSettings(data);
        console.log('üìñ Settings loaded:', data);
      } else {
        console.error('Failed to load settings:', response.status);
        notificationService.warning('‡ªÇ‡∫´‡∫•‡∫î‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î - ‡ªÉ‡∫ä‡ªâ‡∫Ñ‡ªà‡∫≤‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô');
      }
    } catch (error) {
      console.error('Error fetching auto checkout settings:', error);
      notificationService.error('‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡ªÇ‡∫´‡∫•‡∫î‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤‡ªÑ‡∫î‡ªâ');
    } finally {
      setLoading(false);
    }
  };

  const saveSettings = async () => {
    try {
      setSavingSettings(true);
      
      const response = await fetch('/api/admin/auto-checkout/settings', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(settings)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save settings');
      }

      const result = await response.json();
      console.log('üíæ Settings saved:', result);
      
      notificationService.success('‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß (‡ªÄ‡∫ö‡∫¥‡ªà‡∫á‡ªÉ‡∫ô Console)');
      onSuccess();
    } catch (error: any) {
      console.error('Error saving settings:', error);
      notificationService.error(`‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ${error.message}`);
    } finally {
      setSavingSettings(false);
    }
  };

  const runManualCheckout = async () => {
    try {
      setManualCheckoutLoading(true);
      
      const response = await fetch('/api/admin/auto-checkout/run', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to run checkout');
      }

      const result = await response.json();
      console.log('üöÄ Manual checkout result:', result);
      
      if (result.checkedOutCount > 0) {
        notificationService.success(
          `${result.message} - ‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤ ${result.checkedOutCount} ‡∫Ñ‡∫ª‡∫ô` +
          (result.failedCount > 0 ? ` (‡∫•‡∫ª‡ªâ‡∫°‡ªÄ‡∫´‡∫•‡∫ß ${result.failedCount} ‡∫Ñ‡∫ª‡∫ô)` : '')
        );
      } else {
        notificationService.info(result.message || '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ó‡∫µ‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤');
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô console
      if (result.checkedOutUsers?.length > 0) {
        console.log('üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å checkout:', result.checkedOutUsers);
      }
      if (result.failedUsers?.length > 0) {
        console.log('‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà checkout ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result.failedUsers);
      }
      
      onSuccess();
    } catch (error: any) {
      console.error('Error running manual checkout:', error);
      notificationService.error(`‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î: ${error.message}`);
    } finally {
      setManualCheckoutLoading(false);
    }
  };

  const updateSettings = (field: keyof AutoCheckoutSettings, value: any) => {
    setSettings(prev => ({ ...prev, [field]: value }));
  };

  const formatLastRun = (lastRun?: string) => {
    if (!lastRun || lastRun === '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô' || lastRun === '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') {
      return '‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô';
    }
    
    try {
      const date = new Date(lastRun);
      if (isNaN(date.getTime())) return '‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á';
      
      return date.toLocaleString('lo-LA', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (error) {
      return '‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á';
    }
  };

  if (loading) {
    return (
      <div className="fixed inset-0 backdrop-blur-sm bg-black/40 flex items-center justify-center z-50">
        <div className="bg-white rounded-xl p-8 shadow-xl">
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            <span className="ml-3 text-gray-600">‡∫Å‡∫≥‡∫•‡∫±‡∫á‡ªÇ‡∫´‡∫•‡∫î...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 backdrop-blur-sm bg-black/40 flex items-center justify-center z-50">
      <div className="bg-white rounded-xl w-full max-w-2xl mx-4 shadow-xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-6 rounded-t-xl">
          <div className="flex justify-between items-center">
            <div className="flex items-center">
              <FiClock className="mr-3" size={24} />
              <div>
                <h2 className="text-xl font-bold">‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤ Auto Checkout</h2>
                <p className="text-orange-100 text-sm mt-1">
                  ‡∫Å‡∫≥‡∫ô‡∫ª‡∫î‡ªÄ‡∫ß‡∫•‡∫≤‡ªÉ‡∫´‡ªâ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤‡∫≠‡∫±‡∫î‡∫ï‡∫∞‡ªÇ‡∫ô‡∫°‡∫±‡∫î
                </p>
              </div>
            </div>
            <button 
              className="text-white hover:bg-orange-600 rounded-full p-2 transition-colors"
              onClick={onClose}
            >
              <FiX size={20} />
            </button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* ‚ö†Ô∏è Warning Notice */}
          <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
            <div className="flex items-start">
              <FiInfo className="text-amber-500 mt-0.5 mr-3 flex-shrink-0" size={18} />
              <div className="text-sm">
                <p className="font-semibold text-amber-800 mb-1">üìù ‡ªù‡∫≤‡∫ç‡ªÄ‡∫´‡∫î</p>
                <p className="text-amber-700">
                  ‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤‡∫à‡∫∞‡∫ñ‡∫∑‡∫Å‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÄ‡∫õ‡∫±‡∫ô Log ‡ªÉ‡∫ô Console ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô 
                  (‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡ªÉ‡∫ô Database) ‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫Å‡∫≤‡∫ô‡∫ó‡∫ª‡∫î‡∫™‡∫≠‡∫ö
                </p>
              </div>
            </div>
          </div>

          {/* Enable/Disable Switch */}
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <h3 className="font-semibold text-gray-800">‡ªÄ‡∫õ‡∫µ‡∫î‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô Auto Checkout</h3>
              <p className="text-sm text-gray-600">
                ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫à‡∫∞‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤‡ªÉ‡∫´‡ªâ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫≠‡∫±‡∫î‡∫ï‡∫∞‡ªÇ‡∫ô‡∫°‡∫±‡∫î‡∫ï‡∫≤‡∫°‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫ô‡∫ª‡∫î
              </p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings.enabled}
                onChange={(e) => updateSettings('enabled', e.target.checked)}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-orange-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-orange-500"></div>
            </label>
          </div>

          {/* Time Setting */}
          <div className="space-y-4">
            <h3 className="font-semibold text-gray-800 flex items-center">
              <FiSettings className="mr-2" />
              ‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤‡ªÄ‡∫ß‡∫•‡∫≤
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡ªÄ‡∫ß‡∫•‡∫≤ Auto Checkout
                </label>
                <input
                  type="time"
                  value={settings.checkoutTime}
                  onChange={(e) => updateSettings('checkoutTime', e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-orange-500 focus:outline-none"
                  disabled={!settings.enabled}
                />
                <p className="text-xs text-gray-500 mt-1">
                  ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫à‡∫∞‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤‡ªÉ‡∫´‡ªâ‡∫ó‡∫∏‡∫Å‡∫Ñ‡∫ª‡∫ô‡∫ó‡∫µ‡ªà‡∫ç‡∫±‡∫á‡ªÄ‡∫ä‡∫±‡∫Å‡∫≠‡∫¥‡∫ô‡∫¢‡∫π‡ªà
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  ‡ªÄ‡∫Ç‡∫î‡ªÄ‡∫ß‡∫•‡∫≤
                </label>
                <select
                  value={settings.timezone}
                  onChange={(e) => updateSettings('timezone', e.target.value)}
                  className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:border-orange-500 focus:outline-none"
                  disabled={!settings.enabled}
                >
                  <option value="Asia/Vientiane">‡∫•‡∫≤‡∫ß (UTC+7)</option>
                  <option value="Asia/Bangkok">‡ªÑ‡∫ó (UTC+7)</option>
                  <option value="Asia/Ho_Chi_Minh">‡∫´‡∫ß‡∫Ω‡∫î‡∫ô‡∫≤‡∫° (UTC+7)</option>
                </select>
              </div>
            </div>
          </div>

          {/* Status Information */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-semibold text-blue-800 mb-3">‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Å‡∫≤‡∫ô‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô‡∫á‡∫≤‡∫ô</h3>
            
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-blue-600">‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞:</span>
                <span className={`font-medium ${settings.enabled ? 'text-green-600' : 'text-red-600'}`}>
                  {settings.enabled ? '‡ªÄ‡∫õ‡∫µ‡∫î‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô' : '‡∫õ‡∫¥‡∫î‡ªÉ‡∫ä‡ªâ‡∫á‡∫≤‡∫ô'}
                </span>
              </div>
              
              <div className="flex justify-between">
                <span className="text-blue-600">‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤‡∫Ñ‡∫±‡ªâ‡∫á‡∫™‡∫∏‡∫î‡∫ó‡ªâ‡∫≤‡∫ç:</span>
                <span className="font-medium text-gray-700">
                  {formatLastRun(settings.lastRun)}
                </span>
              </div>
              
              {settings.affectedUsers !== undefined && (
                <div className="flex justify-between">
                  <span className="text-blue-600">‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ó‡∫µ‡ªà‡∫ñ‡∫∑‡∫Å‡∫Å‡∫∞‡∫ó‡∫ª‡∫ö:</span>
                  <span className="font-medium text-gray-700">
                    {settings.affectedUsers} ‡∫Ñ‡∫ª‡∫ô
                  </span>
                </div>
              )}
            </div>
          </div>

          {/* Manual Run Section */}
          <div className="border-t pt-4">
            <h3 className="font-semibold text-gray-800 mb-3">‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ó‡∫±‡∫ô‡∫ó‡∫µ</h3>
            <p className="text-sm text-gray-600 mb-4">
              ‡ªÄ‡∫ä‡∫±‡∫Å‡ªÄ‡∫≠‡∫ª‡∫≤‡ªÉ‡∫´‡ªâ‡∫ú‡∫π‡ªâ‡ªÉ‡∫ä‡ªâ‡∫ó‡∫µ‡ªà‡∫ç‡∫±‡∫á‡ªÄ‡∫ä‡∫±‡∫Å‡∫≠‡∫¥‡∫ô‡∫¢‡∫π‡ªà‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î‡∫ó‡∫±‡∫ô‡∫ó‡∫µ (‡∫ö‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫•‡ªç‡∫ñ‡ªâ‡∫≤‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫ô‡∫ª‡∫î)
            </p>
            
            <button
              onClick={runManualCheckout}
              disabled={manualCheckoutLoading}
              className="flex items-center px-4 py-2 bg-amber-500 hover:bg-amber-600 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {manualCheckoutLoading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                  ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô‡∫Å‡∫≤‡∫ô...
                </>
              ) : (
                <>
                  <FiRefreshCw className="mr-2" size={16} />
                  ‡∫î‡∫≥‡ªÄ‡∫ô‡∫µ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ó‡∫±‡∫ô‡∫ó‡∫µ
                </>
              )}
            </button>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-end space-x-3 pt-4 border-t">
            <button
              type="button"
              className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-100 transition-colors"
              onClick={onClose}
              disabled={savingSettings}
            >
              ‡∫ç‡∫ª‡∫Å‡ªÄ‡∫•‡∫µ‡∫Å
            </button>
            <button
              onClick={saveSettings}
              disabled={savingSettings}
              className="flex items-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {savingSettings ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                  ‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å...
                </>
              ) : (
                <>
                  <FiSave className="mr-2" size={16} />
                  ‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Å‡∫≤‡∫ô‡∫ï‡∫±‡ªâ‡∫á‡∫Ñ‡ªà‡∫≤
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AutoCheckoutModal;