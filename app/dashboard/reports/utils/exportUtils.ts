// app/dashboard/reports/utils/exportUtils.ts - ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô

// ===== TYPE DEFINITIONS =====
interface Period {
  startDate: string;
  endDate: string;
}

interface QuickStats {
  totalTickets?: number;
  totalRevenue?: number;
  totalPassengers?: number;
  activeDrivers?: number;
  avgTicketPrice?: number;
  avgPricePerPassenger?: number;
  groupTicketPercentage?: number;
  individualTicketPercentage?: number;
}

interface TicketBreakdown {
  individual?: {
    count: number;
    revenue: number;
    passengers: number;
    percentage: number;
  };
  group?: {
    count: number;
    revenue: number;
    passengers: number;
    percentage: number;
    averageGroupSize: number;
  };
}

interface PaymentMethod {
  _id: string;
  count: number;
  revenue: number;
}

interface SummaryData {
  totalTickets?: number;
  totalRevenue?: number;
  totalPassengers?: number;
  averagePrice?: number;
  averagePricePerPassenger?: number;
  ticketBreakdown?: TicketBreakdown;
  [key: string]: any;
}

interface ReportData {
  period: Period;
  quickStats?: QuickStats;
  summary?: SummaryData;
  sales?: SummaryData;
  paymentMethods?: PaymentMethod[];
  [key: string]: any;
}

type ReportType = 'summary' | 'sales' | 'drivers' | 'financial' | 'vehicles' | 'staff';

// ===== HELPER FUNCTIONS =====
const formatDate = (dateStr: string): string => new Date(dateStr).toLocaleDateString('lo-LA');
const formatCurrency = (amount: number): string => `‚Ç≠${amount.toLocaleString()}`;

const getReportTypeName = (type: ReportType): string => {
  const titles: Record<ReportType, string> = {
    'summary': '‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫•‡∫ß‡∫°',
    'sales': '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç',
    'drivers': '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î',
    'financial': '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô',
    'vehicles': '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫•‡∫ª‡∫î',
    'staff': '‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫≤‡∫ç‡∫õ‡∫µ‡ªâ'
  };
  return titles[type];
};

// ===== MAIN EXPORT FUNCTIONS =====
export const exportToPDF = async (reportData: ReportData, reportType: ReportType): Promise<void> => {
  try {
    // Import jsPDF ‡πÅ‡∏•‡∏∞ html2canvas
    const { default: jsPDF } = await import('jspdf');
    const { default: html2canvas } = await import('html2canvas');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
    const htmlContent = generatePDFContent(reportData, reportType);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á element ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö render
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = htmlContent;
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.top = '0';
    tempDiv.style.width = '794px';
    tempDiv.style.backgroundColor = 'white';
    tempDiv.style.padding = '40px';
    tempDiv.style.fontFamily = 'Arial, sans-serif';
    
    document.body.appendChild(tempDiv);

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ fonts ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
    await document.fonts.ready;

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô canvas
    const canvas = await html2canvas(tempDiv, {
      useCORS: true,
      allowTaint: true,
      background: '#ffffff',
      width: 794,
      height: tempDiv.scrollHeight + 80
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const imgData = canvas.toDataURL('image/png', 1.0);
    const imgWidth = 210;
    const pageHeight = 297;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    let heightLeft = imgHeight;
    let position = 0;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    const today = new Date();
    const dateStr = today.toLocaleDateString('lo-LA').replace(/\//g, '-');
    const reportTypeName = getReportTypeName(reportType);
    const fileName = `${reportTypeName}_${dateStr}.pdf`;

    pdf.save(fileName);

    // ‡∏•‡∏ö element ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    document.body.removeChild(tempDiv);
    
    console.log('PDF exported successfully:', fileName);

  } catch (error) {
    console.error('Error exporting PDF:', error);
    alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫™‡∫ª‡ªà‡∫á‡∫≠‡∫≠‡∫Å PDF');
  }
};

export const printReport = (reportData: ReportData, reportType: ReportType): void => {
  try {
    const htmlContent = generatePDFContent(reportData, reportType);
    
    const iframe = document.createElement('iframe');
    iframe.style.position = 'absolute';
    iframe.style.top = '-9999px';
    iframe.style.left = '-9999px';
    iframe.style.width = '1px';
    iframe.style.height = '1px';
    iframe.style.border = 'none';
    
    document.body.appendChild(iframe);
    
    const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;
    if (iframeDoc) {
      iframeDoc.open();
      iframeDoc.write(htmlContent);
      iframeDoc.close();
      
      iframe.onload = () => {
        setTimeout(() => {
          try {
            iframe.contentWindow?.focus();
            iframe.contentWindow?.print();
          } catch (error) {
            console.error('Print error:', error);
          }
          
          setTimeout(() => {
            document.body.removeChild(iframe);
          }, 2000);
        }, 500);
      };
    }
  } catch (error) {
    console.error('Error printing report:', error);
    alert('‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫û‡∫¥‡∫°‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô');
  }
};

// ===== PDF CONTENT GENERATION =====
const generatePDFContent = (reportData: ReportData, reportType: ReportType): string => {
  const styles = generatePDFStyles();
  const header = generatePDFHeader(reportType);
  const footer = generatePDFFooter();
  const periodInfo = generatePeriodInfo(reportData.period.startDate, reportData.period.endDate);
  const content = generateContentByType(reportData, reportType);

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô - ${getReportTypeName(reportType)}</title>
      <style>${styles}</style>
    </head>
    <body>
      <div class="report-container">
        ${header}
        ${periodInfo}
        ${content}
        ${footer}
      </div>
    </body>
    </html>
  `;
};

const generatePDFStyles = (): string => {
  return `
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Lao:wght@400;700&display=swap');
    
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      font-family: 'Noto Sans Lao', 'Arial', sans-serif;
      font-size: 14px; line-height: 1.6; color: #333;
      background: white; padding: 20px;
    }
    
    .report-container { max-width: 100%; margin: 0 auto; background: white; }
    
    .report-header {
      text-align: center; margin-bottom: 30px;
      border-bottom: 3px solid #2563EB; padding-bottom: 20px;
    }
    
    .report-title {
      font-size: 24px; font-weight: bold;
      margin-bottom: 8px; color: #2563EB;
    }
    
    .report-subtitle { font-size: 16px; color: #666; margin-bottom: 5px; }
    .system-name { font-size: 14px; color: #888; }
    
    .period-info {
      background: #f8f9fa; padding: 15px; margin: 20px 0;
      text-align: center; border-radius: 8px; border: 2px solid #e9ecef;
      font-size: 16px; font-weight: bold;
    }
    
    .content-section { margin: 20px 0; }
    
    .section-title {
      font-size: 18px; font-weight: bold; margin-bottom: 15px;
      color: #333; border-bottom: 2px solid #ddd; padding-bottom: 8px;
    }
    
    .stats-grid {
      display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
      gap: 15px; margin: 15px 0;
    }
    
    .stat-card {
      background: #f8f9fa; border: 2px solid #e9ecef;
      border-radius: 8px; padding: 15px; text-align: center;
    }
    
    .stat-label {
      font-size: 12px; color: #666; margin-bottom: 5px; font-weight: bold;
    }
    
    .stat-value { font-size: 18px; font-weight: bold; color: #2563EB; }
    
    table {
      width: 100%; border-collapse: collapse; margin: 15px 0; font-size: 12px;
    }
    
    table th, table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
    
    table th {
      background: #f1f3f4; font-weight: bold; font-size: 13px; color: #333;
    }
    
    .table-highlight { background: #e3f2fd !important; font-weight: bold; }
    .text-center { text-align: center; }
    .text-right { text-align: right; }
    .currency { font-weight: bold; color: #2563EB; }
    
    .report-footer {
      margin-top: 30px; text-align: center; font-size: 12px; color: #666;
      border-top: 2px solid #ddd; padding-top: 15px;
    }
    
    .no-break { page-break-inside: avoid; }
  `;
};

const generatePDFHeader = (reportType: ReportType): string => {
  return `
    <div class="report-header">
      <div class="report-title">‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô - ${getReportTypeName(reportType)}</div>
      <div class="report-subtitle">‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫≠‡∫≠‡∫Å‡∫õ‡∫µ‡ªâ‡∫•‡∫ª‡∫î‡∫ï‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡∫ó‡∫≤‡∫á</div>
      <div class="system-name">‡∫•‡∫ª‡∫î‡ªÑ‡∫ü ‡∫•‡∫≤‡∫ß-‡∫à‡∫µ‡∫ô</div>
    </div>
  `;
};

const generatePDFFooter = (): string => {
  return `
    <div class="report-footer">
      <p><strong>‡∫™‡ªâ‡∫≤‡∫á‡ªÄ‡∫°‡∫∑‡ªà‡∫≠:</strong> ${new Date().toLocaleString('lo-LA')}</p>
      <p>üöå ‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡∫≠‡∫≠‡∫Å‡∫õ‡∫µ‡ªâ‡∫•‡∫ª‡∫î‡∫ï‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô‡∫õ‡∫∞‡∫à‡∫≥‡∫ó‡∫≤‡∫á‡∫•‡∫ª‡∫î‡ªÑ‡∫ü ‡∫•‡∫≤‡∫ß-‡∫à‡∫µ‡∫ô</p>
    </div>
  `;
};

const generatePeriodInfo = (startDate: string, endDate: string): string => {
  return `
    <div class="period-info">
      üìÖ <strong>‡ªÑ‡∫•‡∫ç‡∫∞‡ªÄ‡∫ß‡∫•‡∫≤:</strong> ${formatDate(startDate)} - ${formatDate(endDate)}
    </div>
  `;
};

const generateContentByType = (reportData: ReportData, reportType: ReportType): string => {
  switch (reportType) {
    case 'summary':
      return generateSummaryContent(reportData);
    case 'sales':
      return generateSalesContent(reportData);
    case 'financial':
      return generateFinancialContent(reportData);
    default:
      return '<div class="content-section">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô</div>';
  }
};

// ===== CONTENT GENERATORS =====
const generateSummaryContent = (reportData: ReportData): string => {
  const stats = reportData.quickStats || {};
  const sales = reportData.sales || {};
  const ticketBreakdown = sales.ticketBreakdown || {};
  
  return `
    <div class="content-section">
      <div class="section-title">üìä ‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫•‡∫ß‡∫°</div>
      
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-label">üé´ ‡∫õ‡∫µ‡ªâ‡∫ó‡∫µ‡ªà‡∫Ç‡∫≤‡∫ç</div>
          <div class="stat-value">${stats.totalTickets || 0}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üë• ‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô‡∫•‡∫ß‡∫°</div>
          <div class="stat-value">${stats.totalPassengers || 0}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üí∞ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°</div>
          <div class="stat-value currency">${formatCurrency(stats.totalRevenue || 0)}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üë®‚Äç‚úàÔ∏è ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å</div>
          <div class="stat-value">${stats.activeDrivers || 0}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üìà ‡∫•‡∫≤‡∫Ñ‡∫≤‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç/‡ªÉ‡∫ö</div>
          <div class="stat-value currency">${formatCurrency(stats.avgTicketPrice || 0)}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üßÆ ‡∫•‡∫≤‡∫Ñ‡∫≤‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç/‡∫Ñ‡∫ª‡∫ô</div>
          <div class="stat-value currency">${formatCurrency(stats.avgPricePerPassenger || 0)}</div>
        </div>
      </div>
      
      <div class="section-title" style="margin-top: 30px;">üé´ ‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡∫õ‡∫µ‡ªâ‡ªÅ‡∫ç‡∫Å‡∫õ‡∫∞‡ªÄ‡∫û‡∫î</div>
      <table class="no-break">
        <tr class="table-highlight">
          <th style="width: 20%;">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫õ‡∫µ‡ªâ</th>
          <th class="text-center" style="width: 15%;">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÉ‡∫ö</th>
          <th class="text-center" style="width: 15%;">‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô</th>
          <th class="text-center" style="width: 20%;">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</th>
          <th class="text-center" style="width: 15%;">‡∫™‡∫±‡∫î‡∫™‡ªà‡∫ß‡∫ô</th>
          <th class="text-center" style="width: 15%;">‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç/‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫°</th>
        </tr>
        <tr>
          <td><strong>üë§ ‡∫õ‡∫µ‡ªâ‡∫ö‡∫∏‡∫Å‡∫Ñ‡∫ª‡∫ô</strong></td>
          <td class="text-center">${ticketBreakdown.individual?.count || 0}</td>
          <td class="text-center">${ticketBreakdown.individual?.passengers || 0}</td>
          <td class="text-center currency">${formatCurrency(ticketBreakdown.individual?.revenue || 0)}</td>
          <td class="text-center"><strong>${ticketBreakdown.individual?.percentage || 0}%</strong></td>
          <td class="text-center">1 ‡∫Ñ‡∫ª‡∫ô</td>
        </tr>
        <tr>
          <td><strong>üë• ‡∫õ‡∫µ‡ªâ‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫°</strong></td>
          <td class="text-center">${ticketBreakdown.group?.count || 0}</td>
          <td class="text-center">${ticketBreakdown.group?.passengers || 0}</td>
          <td class="text-center currency">${formatCurrency(ticketBreakdown.group?.revenue || 0)}</td>
          <td class="text-center"><strong>${ticketBreakdown.group?.percentage || 0}%</strong></td>
          <td class="text-center">${ticketBreakdown.group?.averageGroupSize || 0} ‡∫Ñ‡∫ª‡∫ô</td>
        </tr>
        <tr style="background: #f8f9fa; font-weight: bold;">
          <td><strong>üìä ‡∫•‡∫ß‡∫°‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î</strong></td>
          <td class="text-center">${stats.totalTickets || 0}</td>
          <td class="text-center">${stats.totalPassengers || 0}</td>
          <td class="text-center currency">${formatCurrency(stats.totalRevenue || 0)}</td>
          <td class="text-center">100%</td>
          <td class="text-center">${stats.totalTickets > 0 ? Math.round((stats.totalPassengers || 0) / stats.totalTickets) : 0} ‡∫Ñ‡∫ª‡∫ô</td>
        </tr>
      </table>
      
      <div style="margin-top: 20px; padding: 15px; background: #e3f2fd; border: 2px solid #2196f3; border-radius: 8px; font-size: 12px;">
        <h4 style="color: #1976d2; margin-bottom: 10px; font-size: 14px;">üìã ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫õ‡∫µ‡ªâ‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫°:</h4>
        <ul style="margin: 0; padding-left: 20px; color: #1976d2;">
          <li style="margin-bottom: 5px;">‡∫õ‡∫µ‡ªâ‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫° 1 ‡ªÉ‡∫ö ‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫°‡∫µ‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô <strong>2-10 ‡∫Ñ‡∫ª‡∫ô</strong></li>
          <li style="margin-bottom: 5px;">‡∫•‡∫≤‡∫Ñ‡∫≤‡∫õ‡∫µ‡ªâ‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫° = <strong>‡∫•‡∫≤‡∫Ñ‡∫≤‡∫ï‡ªç‡ªà‡∫Ñ‡∫ª‡∫ô √ó ‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô</strong></li>
          <li style="margin-bottom: 5px;">‡∫Å‡∫≤‡∫ô‡∫ô‡∫±‡∫ö‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç = <strong>‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡ªÉ‡∫ö‡∫õ‡∫µ‡ªâ</strong> (‡∫ö‡ªç‡ªà‡ªÅ‡∫°‡ªà‡∫ô‡∫à‡∫≥‡∫ô‡∫ß‡∫ô‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô)</li>
          <li style="margin-bottom: 5px;">‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô‡∫ï‡ªç‡ªà‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫° = <strong>${ticketBreakdown.group?.averageGroupSize || 0} ‡∫Ñ‡∫ª‡∫ô</strong></li>
          <li>‡∫õ‡∫µ‡ªâ‡∫Å‡∫∞‡∫•‡∫∏‡ªà‡∫°‡∫Ñ‡∫¥‡∫î‡ªÄ‡∫õ‡∫±‡∫ô <strong>${stats.groupTicketPercentage || 0}%</strong> ‡∫Ç‡∫≠‡∫á‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î</li>
        </ul>
      </div>
    </div>
  `;
};

const generateSalesContent = (reportData: ReportData): string => {
  const summary = reportData.summary || {};
  let paymentTable = '';
  
  if (reportData.paymentMethods && reportData.paymentMethods.length > 0) {
    const paymentRows = reportData.paymentMethods.map((pm: PaymentMethod) => `
      <tr>
        <td><strong>${pm._id === 'cash' ? 'üíµ ‡ªÄ‡∫á‡∫¥‡∫ô‡∫™‡∫ª‡∫î' : 'üì± ‡ªÄ‡∫á‡∫¥‡∫ô‡ªÇ‡∫≠‡∫ô'}</strong></td>
        <td class="text-center">${pm.count}</td>
        <td class="text-right currency">${formatCurrency(pm.revenue)}</td>
        <td class="text-center">${summary.totalTickets ? Math.round((pm.count / summary.totalTickets) * 100) : 0}%</td>
      </tr>
    `).join('');
    
    paymentTable = `
      <table class="no-break">
        <tr class="table-highlight">
          <th>‡∫ß‡∫¥‡∫ó‡∫µ‡∫ä‡∫≥‡∫•‡∫∞</th>
          <th class="text-center">‡∫à‡∫≥‡∫ô‡∫ß‡∫ô</th>
          <th class="text-center">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</th>
          <th class="text-center">‡∫™‡∫±‡∫î‡∫™‡ªà‡∫ß‡∫ô</th>
        </tr>
        ${paymentRows}
      </table>
    `;
  }
  
  return `
    <div class="content-section">
      <div class="section-title">üéØ ‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç</div>
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-label">üé´ ‡∫õ‡∫µ‡ªâ‡∫ó‡∫µ‡ªà‡∫Ç‡∫≤‡∫ç</div>
          <div class="stat-value">${summary.totalTickets || 0}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üí∞ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°</div>
          <div class="stat-value currency">${formatCurrency(summary.totalRevenue || 0)}</div>
        </div>
        <div class="stat-card">
          <div class="stat-label">üìà ‡∫•‡∫≤‡∫Ñ‡∫≤‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç</div>
          <div class="stat-value currency">${formatCurrency(summary.averagePrice || 0)}</div>
        </div>
      </div>
      ${paymentTable || '<p style="text-align: center; color: #666;">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Å‡∫≤‡∫ô‡∫ä‡∫≥‡∫•‡∫∞‡ªÄ‡∫á‡∫¥‡∫ô</p>'}
    </div>
  `;
};

const generateFinancialContent = (reportData: ReportData): string => {
  const breakdown = reportData.breakdown || {};
  
  return `
    <div class="content-section">
      <div class="section-title">üíº ‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫Å‡∫≤‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô</div>
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-label">üí∞ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°</div>
          <div class="stat-value currency">${formatCurrency(reportData.summary?.totalRevenue || 0)}</div>
        </div>
      </div>
      <table class="no-break">
        <tr class="table-highlight">
          <th style="width: 20%;">‡∫õ‡∫∞‡ªÄ‡∫û‡∫î</th>
          <th class="text-center" style="width: 30%;">‡∫°‡∫π‡∫ô‡∫Ñ‡ªà‡∫≤</th>
          <th class="text-center" style="width: 20%;">‡ªÄ‡∫õ‡∫µ‡ªÄ‡∫ä‡∫±‡∫ô</th>
          <th class="text-center">‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</th>
        </tr>
        <tr>
          <td><strong>üè¢ ‡∫ö‡ªç‡∫•‡∫¥‡∫™‡∫±‡∫î</strong></td>
          <td class="text-right currency">${formatCurrency(breakdown.company?.totalAmount || 0)}</td>
          <td class="text-center"><strong>10%</strong></td>
          <td class="text-center">${breakdown.company?.transactionCount || 0} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</td>
        </tr>
        <tr>
          <td><strong>üöâ ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫µ</strong></td>
          <td class="text-right currency">${formatCurrency(breakdown.station?.totalAmount || 0)}</td>
          <td class="text-center"><strong>5%</strong></td>
          <td class="text-center">${breakdown.station?.transactionCount || 0} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</td>
        </tr>
        <tr>
          <td><strong>üë• ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î</strong></td>
          <td class="text-right currency">${formatCurrency(breakdown.driver?.totalAmount || 0)}</td>
          <td class="text-center"><strong>85%</strong></td>
          <td class="text-center">${breakdown.driver?.transactionCount || 0} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</td>
        </tr>
      </table>
    </div>
  `;
};