// app/dashboard/reports/utils/generators/driversGenerator.ts - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö drivers report

import { ReportData, FormatCurrencyFunction, Driver } from '../types';

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Drivers Report
 */
export const generateDriversContent = (reportData: ReportData, formatCurrency: FormatCurrencyFunction): string => {
  const summary = reportData.summary || {};
  const metadata = reportData.metadata || {};
  
  // ‡πÅ‡∏¢‡∏Å drivers ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå ‡∏Å‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
  const qualifiedDrivers = (reportData.drivers || []).filter((d: Driver) => (d.totalIncome || 0) > 0);
  const nonQualifiedDrivers = (reportData.drivers || []).filter((d: Driver) => (d.totalIncome || 0) === 0);
  
  return `
    <div class="content-section">
      <div class="section-title">üë• ‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î</div>
      
      ${generateDriversStatsGrid(summary, metadata, qualifiedDrivers, formatCurrency)}
      
      ${generateRevenueBox(summary, qualifiedDrivers, nonQualifiedDrivers, metadata, formatCurrency)}
      
      ${generateQualifiedDriversTable(qualifiedDrivers, formatCurrency)}
      
      ${generateNonQualifiedDriversTable(nonQualifiedDrivers, formatCurrency)}
      
      ${generateDriversExplanation()}
    </div>
  `;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Stats Grid ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 */
const generateDriversStatsGrid = (summary: any, metadata: any, qualifiedDrivers: Driver[], formatCurrency: FormatCurrencyFunction): string => {
  return `
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-label">üë• ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î</div>
        <div class="stat-value">${summary.totalDrivers || 0}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">üèÉ ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫ó‡∫≥‡∫á‡∫≤‡∫ô</div>
        <div class="stat-value">${summary.workingDriversInPeriod || 0}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">üéØ ‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</div>
        <div class="stat-value">${qualifiedDrivers.length}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">üí∞ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫ï‡ªç‡ªà‡∫Ñ‡∫ª‡∫ô‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà</div>
        <div class="stat-value currency">${formatCurrency(metadata.revenuePerDriver || 0)}</div>
      </div>
      <div class="stat-card">
        <div class="stat-label">üíµ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î</div>
        <div class="stat-value currency">${formatCurrency(summary.totalIncome || 0)}</div>
      </div>
    </div>
  `;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
 */
const generateRevenueBox = (summary: any, qualifiedDrivers: Driver[], nonQualifiedDrivers: Driver[], metadata: any, formatCurrency: FormatCurrencyFunction): string => {
  return `
    <div style="background: linear-gradient(135deg, #e8f5e8 0%, #e3f2fd 100%); border: 2px solid #4caf50; border-radius: 8px; padding: 20px; margin: 20px 0;">
      <h3 style="color: #2e7d32; margin-bottom: 15px; font-size: 18px;">üí∞ ‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î</h3>
      <table style="width: 100%; border: none;">
        <tr>
          <td style="border: 1px solid #ddd; padding: 15px; text-align: center; background: white; border-radius: 8px;">
            <div style="font-size: 24px; font-weight: bold; color: #2e7d32;">${formatCurrency(summary.totalIncome || 0)}</div>
            <div style="font-size: 12px; color: #666;">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫° (85%)</div>
          </td>
          <td style="border: 1px solid #ddd; padding: 15px; text-align: center; background: white; border-radius: 8px;">
            <div style="font-size: 24px; font-weight: bold; color: #1976d2;">${qualifiedDrivers.length}</div>
            <div style="font-size: 12px; color: #666;">‡∫ó‡∫≥‡∫Ñ‡∫ª‡∫ö 2 ‡∫Æ‡∫≠‡∫ö</div>
          </td>
          <td style="border: 1px solid #ddd; padding: 15px; text-align: center; background: white; border-radius: 8px;">
            <div style="font-size: 24px; font-weight: bold; color: #7b1fa2;">${formatCurrency(metadata.revenuePerDriver || 0)}</div>
            <div style="font-size: 12px; color: #666;">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç‡∫ï‡ªç‡ªà‡∫Ñ‡∫ª‡∫ô</div>
          </td>
          <td style="border: 1px solid #ddd; padding: 15px; text-align: center; background: white; border-radius: 8px;">
            <div style="font-size: 24px; font-weight: bold; color: #f57c00;">${nonQualifiedDrivers.length}</div>
            <div style="font-size: 12px; color: #666;">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</div>
          </td>
        </tr>
      </table>
    </div>
  `;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
 */
const generateQualifiedDriversTable = (qualifiedDrivers: Driver[], formatCurrency: FormatCurrencyFunction): string => {
  if (qualifiedDrivers.length === 0) {
    return `
      <h3 style="color: #2e7d32; margin: 20px 0 10px 0; font-size: 16px;">
        ‚úÖ ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö (‡∫ó‡∫≥‡∫Ñ‡∫ª‡∫ö 2 ‡∫Æ‡∫≠‡∫ö) - 0 ‡∫Ñ‡∫ª‡∫ô
      </h3>
      <p style="text-align: center; color: #666;">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡ªÉ‡∫ô‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ô‡∫µ‡ªâ</p>
    `;
  }

  const qualifiedRows = qualifiedDrivers.slice(0, 15).map((driver: Driver, index: number) => `
    <tr>
      <td class="text-center">${index + 1}</td>
      <td><strong>${driver.name || '‡∫ö‡ªç‡ªà‡∫•‡∫∞‡∫ö‡∫∏'}</strong></td>
      <td class="text-center">${driver.employeeId || '-'}</td>
      <td class="text-center">${driver.workDays || 0}</td>
      <td class="text-center">
        <span style="background: #e3f2fd; color: #1976d2; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">
          ‚â•2 ‡∫Æ‡∫≠‡∫ö ‚úì
        </span>
      </td>
      <td class="text-right">
        <span style="color: #2e7d32; font-weight: bold; font-size: 14px;">${formatCurrency(driver.totalIncome || 0)}</span>
      </td>
      <td class="text-center">
        <span style="background: #e8f5e8; color: #2e7d32; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">
          ‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö
        </span>
      </td>
      <td class="text-center text-sm">
        ${driver.lastCheckIn 
          ? new Date(driver.lastCheckIn).toLocaleDateString('lo-LA') + '<br>' +
            new Date(driver.lastCheckIn).toLocaleTimeString('lo-LA', { 
              hour: '2-digit', 
              minute: '2-digit' 
            })
          : '-'
        }
      </td>
      <td class="text-center text-sm">
        ${driver.lastCheckOut 
          ? new Date(driver.lastCheckOut).toLocaleDateString('lo-LA') + '<br>' +
            new Date(driver.lastCheckOut).toLocaleTimeString('lo-LA', { 
              hour: '2-digit', 
              minute: '2-digit' 
            })
          : '-'
        }
      </td>
    </tr>
  `).join('');
  
  return `
    <h3 style="color: #2e7d32; margin: 20px 0 10px 0; font-size: 16px;">
      ‚úÖ ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö (‡∫ó‡∫≥‡∫Ñ‡∫ª‡∫ö 2 ‡∫Æ‡∫≠‡∫ö) - ${qualifiedDrivers.length} ‡∫Ñ‡∫ª‡∫ô
    </h3>
    <table>
      <tr class="table-highlight">
        <th class="text-center">#</th>
        <th>‡∫ä‡∫∑‡ªà</th>
        <th class="text-center">‡∫•‡∫∞‡∫´‡∫±‡∫î</th>
        <th class="text-center">‡∫ß‡∫±‡∫ô‡∫ó‡∫≥‡∫á‡∫≤‡∫ô</th>
        <th class="text-center">üéØ ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Æ‡∫≠‡∫ö</th>
        <th class="text-center">üí∞ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</th>
        <th class="text-center">‡∫™‡∫¥‡∫ó‡∫¥‡ªà</th>
        <th class="text-center">‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å (‡∫•‡ªà‡∫≤‡∫™‡∫∏‡∫î)</th>
        <th class="text-center">‡∫≠‡∫≠‡∫Å‡∫ß‡∫Ω‡∫Å (‡∫•‡ªà‡∫≤‡∫™‡∫∏‡∫î)</th>
      </tr>
      ${qualifiedRows}
    </table>
  `;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
 */
const generateNonQualifiedDriversTable = (nonQualifiedDrivers: Driver[], formatCurrency: FormatCurrencyFunction): string => {
  if (nonQualifiedDrivers.length === 0) {
    return '';
  }

  const nonQualifiedRows = nonQualifiedDrivers.slice(0, 10).map((driver: Driver, index: number) => `
    <tr>
      <td class="text-center">${index + 1}</td>
      <td><strong>${driver.name || '‡∫ö‡ªç‡ªà‡∫•‡∫∞‡∫ö‡∫∏'}</strong></td>
      <td class="text-center">${driver.employeeId || '-'}</td>
      <td class="text-center">${driver.workDays || 0}</td>
      <td class="text-center">
        <span style="background: #ffebee; color: #c62828; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">
          &lt;2 ‡∫Æ‡∫≠‡∫ö ‚úó
        </span>
      </td>
      <td class="text-center">
        <span style="color: #c62828; font-weight: bold;">‚Ç≠0</span>
      </td>
      <td class="text-center">
        <span style="background: #ffebee; color: #c62828; padding: 2px 8px; border-radius: 12px; font-size: 11px; font-weight: bold;">
          ‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà
        </span>
      </td>
      <td class="text-center text-sm">
        ${driver.lastCheckIn 
          ? new Date(driver.lastCheckIn).toLocaleDateString('lo-LA') + '<br>' +
            new Date(driver.lastCheckIn).toLocaleTimeString('lo-LA', { 
              hour: '2-digit', 
              minute: '2-digit' 
            })
          : '-'
        }
      </td>
      <td class="text-center text-sm">
        ${driver.lastCheckOut 
          ? new Date(driver.lastCheckOut).toLocaleDateString('lo-LA') + '<br>' +
            new Date(driver.lastCheckOut).toLocaleTimeString('lo-LA', { 
              hour: '2-digit', 
              minute: '2-digit' 
            })
          : '-'
        }
      </td>
    </tr>
  `).join('');
  
  return `
    <h3 style="color: #c62828; margin: 20px 0 10px 0; font-size: 16px;">
      ‚ùå ‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö (‡∫ó‡∫≥‡∫ö‡ªç‡ªà‡∫Ñ‡∫ª‡∫ö 2 ‡∫Æ‡∫≠‡∫ö) - ${nonQualifiedDrivers.length} ‡∫Ñ‡∫ª‡∫ô
    </h3>
    <table>
      <tr class="table-highlight">
        <th class="text-center">#</th>
        <th>‡∫ä‡∫∑‡ªà</th>
        <th class="text-center">‡∫•‡∫∞‡∫´‡∫±‡∫î</th>
        <th class="text-center">‡∫ß‡∫±‡∫ô‡∫ó‡∫≥‡∫á‡∫≤‡∫ô</th>
        <th class="text-center">üéØ ‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞‡∫Æ‡∫≠‡∫ö</th>
        <th class="text-center">üí∞ ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</th>
        <th class="text-center">‡∫™‡∫¥‡∫ó‡∫¥‡ªà</th>
        <th class="text-center">‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å (‡∫•‡ªà‡∫≤‡∫™‡∫∏‡∫î)</th>
        <th class="text-center">‡∫≠‡∫≠‡∫Å‡∫ß‡∫Ω‡∫Å (‡∫•‡ªà‡∫≤‡∫™‡∫∏‡∫î)</th>
      </tr>
      ${nonQualifiedRows}
    </table>
  `;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ñ‡∏ô‡∏Ç‡∏±‡∏ö
 */
const generateDriversExplanation = (): string => {
  return `
    <div style="margin-top: 20px; padding: 20px; background: #e3f2fd; border: 2px solid #2196f3; border-radius: 8px; font-size: 13px;">
      <h4 style="color: #1976d2; margin-bottom: 10px; font-size: 14px;">üìã ‡ªÄ‡∫á‡∫∑‡ªà‡∫≠‡∫ô‡ªÑ‡∫Ç‡∫Å‡∫≤‡∫ô‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫™‡∫≥‡∫•‡∫±‡∫ö‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î:</h4>
      <ul style="margin: 0; padding-left: 20px; color: #1976d2;">
        <li style="margin-bottom: 5px;">‡∫ï‡ªâ‡∫≠‡∫á‡∫ó‡∫≥‡∫Å‡∫≤‡∫ô‡ªÄ‡∫î‡∫µ‡∫ô‡∫ó‡∫≤‡∫á‡∫Ñ‡∫ª‡∫ö <strong>2 ‡∫Æ‡∫≠‡∫ö‡∫ï‡ªç‡ªà‡∫ß‡∫±‡∫ô</strong></li>
        <li style="margin-bottom: 5px;">‡ªÅ‡∫ï‡ªà‡∫•‡∫∞‡∫Æ‡∫≠‡∫ö‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ‡∫ú‡∫π‡ªâ‡ªÇ‡∫î‡∫ç‡∫™‡∫≤‡∫ô <strong>‡∫≠‡∫±‡∫á‡∫ô‡ªâ‡∫≠‡∫ç 80% ‡∫Ç‡∫≠‡∫á‡∫Ñ‡∫ß‡∫≤‡∫°‡∫à‡∫∏‡∫•‡∫ª‡∫î</strong></li>
        <li style="margin-bottom: 5px;">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î <strong>85%</strong> ‡∫à‡∫∞‡∫ñ‡∫∑‡∫Å‡ªÅ‡∫ö‡ªà‡∫á‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡ªÜ‡∫Å‡∫±‡∫ô‡∫•‡∫∞‡∫´‡∫ß‡ªà‡∫≤‡∫á‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫™‡∫¥‡∫ó‡∫¥‡ªà</li>
        <li style="margin-bottom: 5px;">‡∫û‡∫∞‡∫ô‡∫±‡∫Å‡∫á‡∫≤‡∫ô‡∫Ç‡∫±‡∫ö‡∫•‡∫ª‡∫î‡∫ó‡∫µ‡ªà‡∫ó‡∫≥‡∫ö‡ªç‡ªà‡∫Ñ‡∫ª‡∫ö 2 ‡∫Æ‡∫≠‡∫ö ‡∫à‡∫∞‡∫ö‡ªç‡ªà‡ªÑ‡∫î‡ªâ‡∫Æ‡∫±‡∫ö‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</li>
        <li>‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡ªÄ‡∫õ‡∫±‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÉ‡∫ô‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô</li>
      </ul>
    </div>
  `;}