// app/dashboard/reports/components/ReportContent.tsx
import React from 'react';
import { FiCreditCard, FiDollarSign, FiUsers } from 'react-icons/fi';
import { Line, Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
} from 'chart.js';

// Import new components
import VehiclesReportComponent from './VehiclesReportComponent';
import StaffReportComponent from './StaffReportComponent';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);

interface ReportContentProps {
  reportData: any;
  reportType: string;
  loading: boolean;
}

const ReportContent: React.FC<ReportContentProps> = ({ reportData, reportType, loading }) => {
  if (loading) {
    return (
      <div className="flex justify-center items-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      </div>
    );
  }

  if (!reportData) {
    return <div className="text-center py-8 text-gray-500">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ö‡∫ª‡∫î‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô</div>;
  }

  const renderSummaryReport = () => {
    const stats = reportData.quickStats || {};
    return (
      <div className="space-y-4">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <StatCard icon={<FiCreditCard />} title="‡∫õ‡∫µ‡ªâ‡∫ó‡∫µ‡ªà‡∫Ç‡∫≤‡∫ç" value={stats.totalTickets || 0} color="blue" />
          <StatCard icon={<FiDollarSign />} title="‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°" value={`‚Ç≠${(stats.totalRevenue || 0).toLocaleString()}`} color="green" />
          <StatCard icon={<FiUsers />} title="‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å" value={stats.activeDrivers || 0} color="purple" />
          <StatCard icon="üìä" title="‡∫•‡∫≤‡∫Ñ‡∫≤‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç" value={`‚Ç≠${(stats.avgTicketPrice || 0).toLocaleString()}`} color="orange" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>‡∫õ‡∫µ‡ªâ‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:</span>
                <span className="font-semibold">{reportData.sales?.totalTickets || 0}</span>
              </div>
              <div className="flex justify-between">
                <span>‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö:</span>
                <span className="font-semibold">‚Ç≠{(reportData.sales?.totalRevenue || 0).toLocaleString()}</span>
              </div>
            </div>
          </div>

          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î:</span>
                <span className="font-semibold">{reportData.drivers?.totalDrivers || 0}</span>
              </div>
              <div className="flex justify-between">
                <span>‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å:</span>
                <span className="font-semibold">{reportData.drivers?.activeDrivers || 0}</span>
              </div>
            </div>
          </div>

          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫Å‡∫≤‡∫ô‡ªÄ‡∫á‡∫¥‡∫ô</h3>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°:</span>
                <span className="font-semibold">‚Ç≠{(reportData.financial?.totalRevenue || 0).toLocaleString()}</span>
              </div>
              <div className="flex justify-between">
                <span>‡∫™‡ªà‡∫ß‡∫ô‡ªÅ‡∫ö‡ªà‡∫á‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö:</span>
                <span className="font-semibold">‚Ç≠{(reportData.financial?.driverShare || 0).toLocaleString()}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderSalesReport = () => {
    if (!reportData?.paymentMethods) return null;

    const paymentData = {
      labels: reportData.paymentMethods.map((pm: any) => 
        pm._id === 'cash' ? '‡ªÄ‡∫á‡∫¥‡∫ô‡∫™‡∫ª‡∫î' : pm._id === 'qr' ? '‡ªÄ‡∫á‡∫¥‡∫ô‡ªÇ‡∫≠‡∫ô' : pm._id
      ),
      datasets: [{
        data: reportData.paymentMethods.map((pm: any) => pm.count),
        backgroundColor: ['#3B82F6', '#10B981', '#F59E0B'],
      }]
    };

    return (
      <div className="space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫Å‡∫≤‡∫ô‡∫ä‡∫≥‡∫•‡∫∞‡ªÄ‡∫á‡∫¥‡∫ô</h3>
            <div className="h-48">
              <Doughnut data={paymentData} options={{ maintainAspectRatio: false }} />
            </div>
          </div>

          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫™‡∫∞‡∫´‡∫º‡∫∏‡∫ö‡∫ç‡∫≠‡∫î‡∫Ç‡∫≤‡∫ç</h3>
            <div className="grid grid-cols-1 gap-4 text-center">
              <div>
                <p className="text-xl font-bold text-blue-600">{reportData.summary?.totalTickets || 0}</p>
                <p className="text-sm text-gray-600">‡∫õ‡∫µ‡ªâ‡∫ó‡∫µ‡ªà‡∫Ç‡∫≤‡∫ç</p>
              </div>
              <div>
                <p className="text-xl font-bold text-green-600">‚Ç≠{(reportData.summary?.totalRevenue || 0).toLocaleString()}</p>
                <p className="text-sm text-gray-600">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°</p>
              </div>
              <div>
                <p className="text-xl font-bold text-purple-600">‚Ç≠{(reportData.summary?.averagePrice || 0).toLocaleString()}</p>
                <p className="text-sm text-gray-600">‡∫•‡∫≤‡∫Ñ‡∫≤‡ªÄ‡∫ä‡∫•‡∫µ‡ªà‡∫ç</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

const renderDriverReport = () => {
  if (!reportData || !Array.isArray(reportData.drivers)) {
    return <div className="text-center py-8 text-gray-500">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö</div>;
  }

  const summary = reportData.summary || {};
  const metadata = reportData.metadata || {};

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <StatCard title="‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡∫ó‡∫±‡∫á‡ªù‡∫ª‡∫î" value={summary.totalDrivers || 0} color="blue" />
        <StatCard title="‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡∫ó‡∫µ‡ªà‡∫ó‡∫≥‡∫á‡∫≤‡∫ô" value={summary.workingDriversInPeriod || 0} color="green" />
        <StatCard title="‡∫ß‡∫±‡∫ô‡∫ó‡∫≥‡∫ß‡∫Ω‡∫Å‡∫•‡∫ß‡∫°" value={summary.totalWorkDays || 0} color="purple" />
        <StatCard title="‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫ï‡ªç‡ªà‡∫Ñ‡∫ª‡∫ô" value={`‚Ç≠${(metadata.revenuePerDriver || 0).toLocaleString()}`} color="orange" />
      </div>

      <div className="bg-white border rounded-lg p-4">
        <h3 className="text-lg font-semibold mb-3">‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö</h3>
        {reportData.drivers.length === 0 ? (
          <div className="text-center py-8 text-gray-500">‡∫ö‡ªç‡ªà‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö‡∫ó‡∫µ‡ªà‡∫°‡∫µ‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡ªÉ‡∫ô‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ô‡∫µ‡ªâ</div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="border-b">
                  <th className="text-left p-2">‡∫ä‡∫∑‡ªà</th>
                  <th className="text-left p-2">‡∫•‡∫∞‡∫´‡∫±‡∫î</th>
                  <th className="text-center p-2">‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫∞</th>
                  <th className="text-center p-2">‡∫ß‡∫±‡∫ô‡∫ó‡∫≥‡∫á‡∫≤‡∫ô</th>
                  <th className="text-right p-2">‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö (KIP)</th>
                  <th className="text-center p-2">‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å</th>
                  <th className="text-center p-2">‡∫≠‡∫≠‡∫Å‡∫ß‡∫Ω‡∫Å</th>
                </tr>
              </thead>
              <tbody>
                {reportData.drivers.slice(0, 10).map((driver: any, index: number) => (
                  <tr key={driver.id || index} className="border-b">
                    <td className="p-2 font-medium">{driver.name || 'N/A'}</td>
                    <td className="p-2 text-gray-600">{driver.employeeId || 'N/A'}</td>
                    <td className="p-2 text-center">
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                        driver.performance === 'Active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                      }`}>
                        {driver.performance === 'Active' ? '‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å' : '‡∫ö‡ªç‡ªà‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤‡∫ß‡∫Ω‡∫Å'}
                      </span>
                    </td>
                    <td className="p-2 text-center">{driver.workDays || 0}</td>
                    <td className="p-2 text-right">
                      <span className={`font-bold ${(driver.totalIncome || 0) > 0 ? 'text-green-600' : 'text-gray-400'}`}>
                        ‚Ç≠{(driver.totalIncome || 0).toLocaleString()}
                      </span>
                    </td>
                    <td className="p-2 text-center text-sm text-gray-600">
                      {driver.lastCheckIn 
                        ? new Date(driver.lastCheckIn).toLocaleDateString('lo-LA') + ' ' +
                          new Date(driver.lastCheckIn).toLocaleTimeString('lo-LA', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })
                        : '-'
                      }
                    </td>
                    <td className="p-2 text-center text-sm text-gray-600">
                      {driver.lastCheckOut 
                        ? new Date(driver.lastCheckOut).toLocaleDateString('lo-LA') + ' ' +
                          new Date(driver.lastCheckOut).toLocaleTimeString('lo-LA', { 
                            hour: '2-digit', 
                            minute: '2-digit' 
                          })
                        : '-'
                      }
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        
        {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ */}
        <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
          <p className="text-sm text-blue-700">
            <strong>üìù ‡ªù‡∫≤‡∫ç‡ªÄ‡∫´‡∫î:</strong> ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫™‡∫∞‡ªÅ‡∫î‡∫á‡ªÄ‡∫õ‡∫±‡∫ô‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡ªÉ‡∫ô‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ó‡∫µ‡ªà‡ªÄ‡∫•‡∫∑‡∫≠‡∫Å‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô 
            (‡ªÄ‡∫Ç‡∫ª‡ªâ‡∫≤-‡∫≠‡∫≠‡∫Å‡∫ß‡∫Ω‡∫Å‡ªÅ‡∫°‡ªà‡∫ô‡∫Ñ‡∫±‡ªâ‡∫á‡∫•‡ªà‡∫≤‡∫™‡∫∏‡∫î‡ªÉ‡∫ô‡∫ä‡ªà‡∫ß‡∫á‡ªÄ‡∫ß‡∫•‡∫≤‡∫ô‡∫±‡ªâ‡∫ô)
          </p>
        </div>
      </div>
    </div>
  );
};

  const renderFinancialReport = () => {
    if (!reportData?.breakdown) return null;

    const breakdown = reportData.breakdown;
    const chartData = {
      labels: ['‡∫ö‡ªç‡∫•‡∫¥‡∫™‡∫±‡∫î (10%)', '‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫µ (5%)', '‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö (85%)'],
      datasets: [{
        data: [
          breakdown.company?.totalAmount || 0,
          breakdown.station?.totalAmount || 0,
          breakdown.driver?.totalAmount || 0
        ],
        backgroundColor: ['#3B82F6', '#10B981', '#F59E0B'],
      }]
    };

    return (
      <div className="space-y-4">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <StatCard title="‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö‡∫•‡∫ß‡∫°" value={`‚Ç≠${(reportData.summary?.totalRevenue || 0).toLocaleString()}`} color="blue" />
          <StatCard title="‡∫ö‡ªç‡∫•‡∫¥‡∫™‡∫±‡∫î" value={`‚Ç≠${(reportData.summary?.companyShare || 0).toLocaleString()}`} color="green" />
          <StatCard title="‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫µ" value={`‚Ç≠${(reportData.summary?.stationShare || 0).toLocaleString()}`} color="purple" />
          <StatCard title="‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö" value={`‚Ç≠${(reportData.summary?.driverShare || 0).toLocaleString()}`} color="orange" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫Å‡∫≤‡∫ô‡ªÅ‡∫ö‡ªà‡∫á‡∫•‡∫≤‡∫ç‡∫Æ‡∫±‡∫ö</h3>
            <div className="h-48">
              <Doughnut data={chartData} options={{ maintainAspectRatio: false }} />
            </div>
          </div>

          <div className="bg-white border rounded-lg p-4">
            <h3 className="text-lg font-semibold mb-3">‡∫•‡∫≤‡∫ç‡∫•‡∫∞‡∫≠‡∫Ω‡∫î</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center p-2 bg-blue-50 rounded">
                <div>
                  <p className="font-medium text-blue-900">‡∫ö‡ªç‡∫•‡∫¥‡∫™‡∫±‡∫î (10%)</p>
                  <p className="text-sm text-blue-600">{breakdown.company?.transactionCount || 0} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</p>
                </div>
                <p className="font-bold text-blue-600">‚Ç≠{(breakdown.company?.totalAmount || 0).toLocaleString()}</p>
              </div>
              
              <div className="flex justify-between items-center p-2 bg-green-50 rounded">
                <div>
                  <p className="font-medium text-green-900">‡∫™‡∫∞‡∫ñ‡∫≤‡∫ô‡∫µ (5%)</p>
                  <p className="text-sm text-green-600">{breakdown.station?.transactionCount || 0} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</p>
                </div>
                <p className="font-bold text-green-600">‚Ç≠{(breakdown.station?.totalAmount || 0).toLocaleString()}</p>
              </div>
              
              <div className="flex justify-between items-center p-2 bg-orange-50 rounded">
                <div>
                  <p className="font-medium text-orange-900">‡∫Ñ‡∫ª‡∫ô‡∫Ç‡∫±‡∫ö (85%)</p>
                  <p className="text-sm text-orange-600">{breakdown.driver?.transactionCount || 0} ‡∫•‡∫≤‡∫ç‡∫Å‡∫≤‡∫ô</p>
                </div>
                <p className="font-bold text-orange-600">‚Ç≠{(breakdown.driver?.totalAmount || 0).toLocaleString()}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Render based on report type
  switch (reportType) {
    case 'summary': 
      return renderSummaryReport();
    case 'sales': 
      return renderSalesReport();
    case 'drivers': 
      return renderDriverReport();
    case 'financial': 
      return renderFinancialReport();
    case 'vehicles': 
      return <VehiclesReportComponent reportData={reportData} loading={loading} />;
    case 'staff': 
      return <StaffReportComponent reportData={reportData} loading={loading} />;
    default: 
      return <div>‡∫õ‡∫∞‡ªÄ‡∫û‡∫î‡∫ö‡∫ª‡∫î‡∫•‡∫≤‡∫ç‡∫á‡∫≤‡∫ô‡∫ö‡ªç‡ªà‡∫ñ‡∫∑‡∫Å‡∫ï‡ªâ‡∫≠‡∫á</div>;
  }
};

// StatCard Component
const StatCard: React.FC<{
  title: string;
  value: string | number;
  color: string;
  icon?: React.ReactNode;
}> = ({ title, value, color, icon }) => {
  const colorClasses = {
    blue: 'bg-blue-50 border-blue-200',
    green: 'bg-green-50 border-green-200',
    purple: 'bg-purple-50 border-purple-200',
    orange: 'bg-orange-50 border-orange-200'
  };

  const textClasses = {
    blue: 'text-blue-600',
    green: 'text-green-600',
    purple: 'text-purple-600',
    orange: 'text-orange-600'
  };

  return (
    <div className={`${colorClasses[color as keyof typeof colorClasses]} border rounded-lg p-3 text-center`}>
      {icon && <div className={`${textClasses[color as keyof typeof textClasses]} mb-2`}>{icon}</div>}
      <p className={`text-xl font-bold ${textClasses[color as keyof typeof textClasses]}`}>{value}</p>
      <p className={`text-sm ${textClasses[color as keyof typeof textClasses]}`}>{title}</p>
    </div>
  );
};

export default ReportContent;